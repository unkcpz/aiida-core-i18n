# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, ECOLE POLYTECHNIQUE FEDERALE DE LAUSANNE (Theory and Simulation of Materials (THEOS) and National Centre for Computational Design and Discovery of Novel Materials (NCCR MARVEL)), Switzerland and ROBERT BOSCH LLC, USA. All rights reserved
# This file is distributed under the same license as the AiiDA package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Jason.Eu <morty.yu@yahoo.com>, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: AiiDA 1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-01 16:11+0000\n"
"PO-Revision-Date: 2020-07-01 16:11+0000\n"
"Last-Translator: Jason.Eu <morty.yu@yahoo.com>, 2020\n"
"Language-Team: Chinese (China) (https://www.transifex.com/aiidateam/teams/98967/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../docs/source/intro/about.rst:5
msgid "What is AiiDA"
msgstr "AiiDA是什么"

#: ../docs/source/intro/about.rst:7
msgid ""
"AiiDA is an open-source Python infrastructure to help researchers with "
"automating, managing, persisting, sharing and reproducing the complex "
"workflows associated with modern computational science and all associated "
"data."
msgstr ""
"AiiDA是一个使用Python编写的开源复杂工作流设计和管理框架，旨在帮助从事计算科学（计算材料学，计算生物学等）的相关研究者可以更好的管理，编写，使用和分享复杂的工作流以及计算产生的有用数据。它使得在研究中复杂的计算流程的可重复性得以保证。"

#: ../docs/source/intro/about.rst:9
msgid ""
"AiiDA is built to support and streamline the four core pillars of the ADES "
"model: Automation, Data, Environment, and Sharing (described `here "
"<https://arxiv.org/abs/1504.01163>`__). Some of the key features of AiiDA "
"include:"
msgstr ""
"AiiDA实现并支持了ADES 模式的四大基石： (A)utomation（自动）, (D)ata（数据）, (E)nvironment（社区环境）, "
"和 (S)haring （分享） (在 `该论文 <https://arxiv.org/abs/1504.01163>`__). "
"AiiDA支持的一些典型特性包括："

#: ../docs/source/intro/about.rst:11
msgid ""
"**Workflows:** AiiDA allows to build and execute complex, auto-documenting "
"workflows linked to multiple codes on local and remote computers."
msgstr "**工作流：** AiiDA 可以用来创建并执行复杂的，自动文档化的工作流，来连接本地和远端计算资源上的多个计算代码。"

#: ../docs/source/intro/about.rst:12
msgid ""
"**High-throughput:** AiiDA's event-based workflow engine supports tens of "
"thousands of processes per hour with full check-pointing."
msgstr "**高通量：** AiiDA的基于事件的工作流引擎支持成百上千（每小时）的带有检查点的计算例程。"

#: ../docs/source/intro/about.rst:13
msgid ""
"**Data provenance:** AiiDA automatically tracks and records inputs, outputs "
"and metadata of all calculations and workflows in extensive provenance "
"graphs that preserve the full lineage of all data."
msgstr ""
"**数据可验证性** AiiDA 自动追踪所有可验证性图中(provenance graph) 的输入、输出和元数据，以保证计算的完全的可重复性。"

#: ../docs/source/intro/about.rst:14
msgid ""
"**Advanced queries:** AiiDA's query language enables fast graph queries on "
"millions of nodes."
msgstr "**高级的查询检索特性：** AiiDA'的查询语言支持快速的千万个节点的图查询。"

#: ../docs/source/intro/about.rst:15
msgid ""
"**Plugin interface:** AiiDA can support via plugins any computational code "
"and data analytics tool, data type, scheduler, connection mode, etc. (see "
"`public plugin repository <https://aiidateam.github.io/aiida-registry/>`__)."
msgstr ""
"**插件接口：:** AiiDA 可以通过插件来支持各种计算代码，和各种数据分析工具，各种数据类型，任务调度工具以及远程连接方式等 (参见 `公共插件库"
" <https://aiidateam.github.io/aiida-registry/>`__)."

#: ../docs/source/intro/about.rst:16
msgid ""
"**HPC interface:** AiiDA can seamlessly deal with heterogeneous and remote "
"computing resources; it works with many schedulers out of the box (`SLURM "
"<https://slurm.schedmd.com>`__, `PBS Pro <https://www.pbspro.org/>`__, "
"`torque <http://www.adaptivecomputing.com/products/torque/>`__, `SGE "
"<http://gridscheduler.sourceforge.net/>`__ or `LSF "
"<https://www.ibm.com/support/knowledgecenter/SSETD4/product_welcome_platform_lsf.html>`__)."
msgstr ""
"**高性能集群接口：** AiiDA支持无缝的把你的计算从一个集群转换到另一个集群运行。AiiDA 兼容各种任务调度软件 `SLURM "
"<https://slurm.schedmd.com>`_, `PBS Pro <https://www.pbspro.org/>`_, `torque"
" <http://www.adaptivecomputing.com/products/torque/>`_, `SGE "
"<http://gridscheduler.sourceforge.net/>`_ 或者 `LSF "
"<https://www.ibm.com/support/knowledgecenter/SSETD4/product_welcome_platform_lsf.html>`_"
" ，对这些任务调度工具AiiDA都是源生支持的。"

#: ../docs/source/intro/about.rst:17
msgid ""
"**Open science:** AiiDA allows to export both full databases and selected "
"subsets, to be shared with collaborators or made available and browsable "
"online on the `Archive <https://archive.materialscloud.org/>`__ and `Explore"
" <https://www.materialscloud.org/explore>`__ sections of `Materials Cloud "
"<https://www.materialscloud.org>`__."
msgstr ""
"**开放科学：** AiiDA可以将全部或部分的数据库导出，以便于和同行分享，或上传至 `Materials Cloud "
"<https://www.materialscloud.org>`__ 以变 `归档 "
"<https://archive.materialscloud.org/>`__ 和 `检索 "
"<https://www.materialscloud.org/explore>`__ 。"

#: ../docs/source/intro/about.rst:18
msgid ""
"**Open source:** AiiDA is released under the `MIT open-source license "
"<LICENSE.txt>`__."
msgstr "**开源：** AiiDA 通过 `MIT 开源协议 <LICENSE.txt>`__ 发布"

#: ../docs/source/intro/about.rst:20
msgid ""
"See also the `list of AiiDA-powered scientific publications "
"<http://www.aiida.net/science/>`__ and `testimonials from AiiDA users "
"<http://www.aiida.net/testimonials/>`__."
msgstr ""
"同时参见 `已发表的得益于AiiDA的科学文献 <http://www.aiida.net/science/>`__ 和 `来自AiiDA 用户的推荐书"
" <http://www.aiida.net/testimonials/>`__."

#: ../docs/source/intro/get_started.rst:5
msgid "Getting Started"
msgstr "从这里开始"

#: ../docs/source/intro/get_started.rst:7
msgid ""
"An AiiDA installation consists of three core components (plus any external "
"codes you wish to run):"
msgstr "AiiDA的安装有三个主要组建的安装组成（另外还包括你需要运行的外部代码的安装）："

#: ../docs/source/intro/get_started.rst:9
msgid ""
"aiida-core: The main Python package and the associated ``verdi`` command "
"line interface"
msgstr "aiida-core（核心组建）: 主体Python包以及命令还接口程序 ``verdi`` "

#: ../docs/source/intro/get_started.rst:10
msgid ""
"|PostgreSQL|: The service that manages the database that AiiDA uses to store"
" data."
msgstr "|PostgreSQL|: AiiDA用户用于存放和管理计算数据的数据库服务"

#: ../docs/source/intro/get_started.rst:11
msgid "|RabbitMQ|: The message broker used for communication within AiiDA."
msgstr "|RabbitMQ|: AiiDA中用于工作流程中控制消息储存和通信的消息中间件组建。"

#: ../docs/source/intro/get_started.rst:13
msgid ""
"There are multiple routes to setting up a working AiiDA environment. These "
"are shown below, followed by a recommended \"quick-install\" route on your "
"local computer."
msgstr ""

#: ../docs/source/intro/get_started.rst:20
msgid ":fa:`desktop,mr-1` **Direct (Bare Metal)**"
msgstr ""

#: ../docs/source/intro/get_started.rst:22
msgid "*Install software directly into your local root directory.*"
msgstr ""

#: ../docs/source/intro/get_started.rst:24
msgid ""
"The prerequisite software can be installed using most package managers, "
"including: apt, Homebrew, MacPorts, Gentoo and Windows Subsystem for Linux."
msgstr ""

#: ../docs/source/intro/get_started.rst:28
msgid ""
":link-badge:`intro:install:prerequisites,Prerequisites install,ref,badge-"
"primary text-white` :link-badge:`intro:install:aiida-core,aiida-core "
"install,ref,badge-primary text-white`"
msgstr ""

#: ../docs/source/intro/get_started.rst:33
msgid ":fa:`folder,mr-1` **Virtual Environment**"
msgstr ""

#: ../docs/source/intro/get_started.rst:35
msgid "*Install software into an isolated directory on your machine.*"
msgstr ""

#: ../docs/source/intro/get_started.rst:37
msgid ""
"Environment managers such as `Conda <https://docs.conda.io>`__, `pipenv "
"<https://pipenv.pypa.io>`__  and `venv "
"<https://docs.python.org/3/library/venv.html>`__ create isolated "
"environments, allowing for installation of multiple versions of software on "
"the same machine. It is advised that you install ``aiida-core`` into one of "
"these managed environments."
msgstr ""

#: ../docs/source/intro/get_started.rst:42
msgid ""
":link-badge:`intro:install:virtual_environments,Environments Tutorial,ref"
",badge-primary text-white` :link-badge:`https://anaconda.org/conda-forge"
"/aiida-core,aiida-core on Conda,url,badge-primary text-white`"
msgstr ""

#: ../docs/source/intro/get_started.rst:47
msgid ":fa:`cube,mr-1` **Containers**"
msgstr ""

#: ../docs/source/intro/get_started.rst:49
msgid "*Use a pre-made image of all the required software.*"
msgstr ""

#: ../docs/source/intro/get_started.rst:51
msgid ""
"AiiDA maintains a `Docker <https://www.docker.com/>`__ image, which is "
"particularly useful for learning and testing purposes. It is a great way to "
"quickly get started on the tutorials."
msgstr ""

#: ../docs/source/intro/get_started.rst:56
msgid ""
":link-badge:`intro:install:docker,Docker Tutorial,ref,badge-primary text-"
"white` :link-badge:`https://hub.docker.com/r/aiidateam/aiida-core,aiida-core"
" on DockerHub,url,badge-primary text-white`"
msgstr ""

#: ../docs/source/intro/get_started.rst:61
msgid ":fa:`cloud,mr-1` **Virtual Machines**"
msgstr ""

#: ../docs/source/intro/get_started.rst:63
msgid "*Use a pre-made machine with all the required software.*"
msgstr ""

#: ../docs/source/intro/get_started.rst:65
msgid ""
"`Materials Cloud <https://www.materialscloud.org>`__ provides both "
"downloadable and web based VMs, also incorporating pre-installed Materials "
"Science codes."
msgstr ""

#: ../docs/source/intro/get_started.rst:70
msgid ""
":link-badge:`https://materialscloud.org/quantum-mobile,Quantum Mobile,url"
",badge-primary text-white` :link-"
"badge:`https://aiidalab.materialscloud.org,AiiDA lab,url,badge-primary text-"
"white`"
msgstr ""

#: ../docs/source/intro/get_started.rst:76
msgid "Quick Start"
msgstr ""

#: ../docs/source/intro/get_started.rst:78
msgid ""
"Here we first provide a simple approach for installation and setup on your "
"local computer."
msgstr ""

#: ../docs/source/intro/get_started.rst:81
msgid "Install Software"
msgstr ""

#: ../docs/source/intro/get_started.rst:86
msgid ":fa:`download,mr-1` **Install with conda**"
msgstr ""

#: ../docs/source/intro/get_started.rst:94
msgid ""
"`Conda <https://docs.conda.io>`__ provides a cross-platform package "
"management system, from which we can install all the basic components of the"
" AiiDA infrastructure in an isolated environment."
msgstr ""

#: ../docs/source/intro/get_started.rst:98
msgid ":fa:`download,mr-1` **Install with pip**"
msgstr ""

#: ../docs/source/intro/get_started.rst:105
msgid ""
"``aiida-core`` can be installed from `PyPi <https://pypi.org/project/aiida-"
"core>`__. It is strongly recommended that you install into a :ref:`virtual "
"environment <intro:install:virtual_environments>`. You will then need to "
"install |PostgreSQL| and |RabbitMQ| depending on your operating system."
msgstr ""

#: ../docs/source/intro/get_started.rst:109
msgid ""
":link-badge:`intro:install:prerequisites,Install prerequisites,ref,badge-"
"primary text-white`"
msgstr ""

#: ../docs/source/intro/get_started.rst:112
msgid "Initialise Data Storage"
msgstr ""

#: ../docs/source/intro/get_started.rst:114
msgid ""
"Before working with AiiDA, you must first initialize a database storage area"
" on disk."
msgstr ""

#: ../docs/source/intro/get_started.rst:121
msgid ""
"This *database cluster* may contain a collection of databases (one per "
"profile) that is managed by a single running server process. We start this "
"process with:"
msgstr ""

#: ../docs/source/intro/get_started.rst:128
#: ../docs/source/intro/installation.rst:150
#: ../docs/source/intro/installation.rst:193
#: ../docs/source/intro/installation.rst:248
#: ../docs/source/intro/installation.rst:353
msgid "Further Reading"
msgstr ""

#: ../docs/source/intro/get_started.rst:131
#: ../docs/source/intro/installation.rst:532
msgid ""
"`Creating a Database Cluster <https://www.postgresql.org/docs/12/creating-"
"cluster.html>`__."
msgstr ""

#: ../docs/source/intro/get_started.rst:132
#: ../docs/source/intro/installation.rst:533
msgid ""
"`Starting the Database Server <https://www.postgresql.org/docs/12/server-"
"start.html>`__."
msgstr ""

#: ../docs/source/intro/get_started.rst:134
msgid ""
"Next, we set up an AiiDA configuration profile and related data storage, "
"with the `quicksetup` command."
msgstr ""

#: ../docs/source/intro/get_started.rst:147
msgid ""
"At this point you now have a working AiiDA environment, from which you can "
"add and retrieve data."
msgstr ""

#: ../docs/source/intro/get_started.rst:149
msgid "Tab Completion"
msgstr ""

#: ../docs/source/intro/get_started.rst:152
msgid "Enable tab completion of ``verdi`` commands in the terminal with:"
msgstr ""

#: ../docs/source/intro/get_started.rst:158
msgid ""
":link-badge:`how-to:installation:configure:tab-completion,Read More,ref"
",badge-primary text-white`"
msgstr ""

#: ../docs/source/intro/get_started.rst:161
msgid "Start Computation Services"
msgstr ""

#: ../docs/source/intro/get_started.rst:163
msgid ""
"In order to run computations, some additional steps are required to start "
"the services that manage these background processes. The |RabbitMQ| service "
"is used, to manage communication between processes and retain process "
"states, even after restarting your computer:"
msgstr ""

#: ../docs/source/intro/get_started.rst:170
msgid ""
"We then start one or more \"daemon\" processes, which handle the execution "
"and monitoring of all submitted computations."
msgstr ""

#: ../docs/source/intro/get_started.rst:176
msgid "Finally, to check that all services are running as expected use:"
msgstr ""

#: ../docs/source/intro/get_started.rst:188
msgid ""
"Awesome! You now have a fully operational installation from which to take "
"the next steps!"
msgstr ""

#: ../docs/source/intro/get_started.rst:191
msgid "Stopping Services"
msgstr ""

#: ../docs/source/intro/get_started.rst:193
msgid ""
"After finishing with your aiida session, particularly if switching between "
"profiles, you may wish to power down the services:"
msgstr ""

#: ../docs/source/intro/get_started.rst:200
msgid ""
"Any computations that are still running at this point, will be picked up "
"next time the services are started."
msgstr ""

#: ../docs/source/intro/get_started.rst:203
msgid "Having problems?"
msgstr ""

#: ../docs/source/intro/get_started.rst:206
msgid ":ref:`See the troubleshooting section <intro:troubleshooting>`."
msgstr ""

#: ../docs/source/intro/get_started.rst:208
msgid "In-depth instructions"
msgstr ""

#: ../docs/source/intro/get_started.rst:211
msgid ""
"For more ways to install AiiDA, :ref:`check the detailed installation "
"section <intro:install>`."
msgstr ""

#: ../docs/source/intro/get_started.rst:213
msgid ""
"For more detailed instructions on configuring AiiDA, :ref:`see the "
"configuration how-to <how-to:installation:configure>`."
msgstr ""

#: ../docs/source/intro/get_started.rst:216
msgid "What Next?"
msgstr ""

#: ../docs/source/intro/get_started.rst:218
msgid ""
"If you are new to AiiDA, go through the :ref:`Basic Tutorial "
"<tutorial:basic>`, or see our :ref:`Next steps guide <tutorial:next-steps>`."
msgstr ""

#: ../docs/source/intro/index.rst:3
msgid "Introduction"
msgstr ""

#: ../docs/source/intro/installation.rst:5
msgid "Detailed Installation"
msgstr ""

#: ../docs/source/intro/installation.rst:10
msgid "Installing Prerequisites"
msgstr ""

#: ../docs/source/intro/installation.rst:12
msgid ""
"AiiDA is designed to run on `Unix <https://en.wikipedia.org/wiki/Unix>`_ "
"operating systems and requires the following software:"
msgstr ""

#: ../docs/source/intro/installation.rst:14
msgid ""
"`bash <https://en.wikipedia.org/wiki/Bash_(Unix_shell)>`_ or `zsh "
"<https://en.wikipedia.org/wiki/Z_shell>`_ (The shell)"
msgstr ""

#: ../docs/source/intro/installation.rst:16
msgid "`python`_ >= 3.5 (The programming language used by AiiDA)"
msgstr ""

#: ../docs/source/intro/installation.rst:17
msgid "`python3-pip`_ (Python 3 package manager)"
msgstr ""

#: ../docs/source/intro/installation.rst:18
msgid "`postgresql`_ (Database software, version 9.4 or higher)"
msgstr ""

#: ../docs/source/intro/installation.rst:19
msgid ""
"`RabbitMQ`_ (A message broker necessary for AiiDA to communicate between "
"processes)"
msgstr ""

#: ../docs/source/intro/installation.rst:21
msgid "Depending on your set up, there are a few optional dependencies:"
msgstr ""

#: ../docs/source/intro/installation.rst:23
msgid "`git`_ (Version control system used for AiiDA development)"
msgstr ""

#: ../docs/source/intro/installation.rst:24
msgid "`graphviz`_ (For plotting AiiDA provenance graphs)"
msgstr ""

#: ../docs/source/intro/installation.rst:35
msgid "AiiDA has been tested on the following platforms:"
msgstr ""

#: ../docs/source/intro/installation.rst:37
msgid "Ubuntu 14.04, 16.04, 18.04"
msgstr ""

#: ../docs/source/intro/installation.rst:38
msgid "Mac OS X"
msgstr ""

#: ../docs/source/intro/installation.rst:40
msgid "We expect AiiDA to also run on:"
msgstr ""

#: ../docs/source/intro/installation.rst:42
msgid "Older and newer Ubuntu versions"
msgstr ""

#: ../docs/source/intro/installation.rst:43
msgid "Other Linux distributions"
msgstr ""

#: ../docs/source/intro/installation.rst:44
msgid "Windows Subsystem for Linux (WSL)"
msgstr ""

#: ../docs/source/intro/installation.rst:46
msgid ""
"Below, we provide installation instructions for a number of operating "
"systems."
msgstr ""

#: ../docs/source/intro/installation.rst:59
msgid ""
"See :ref:`Ubuntu instructions<intro:install:prerequisites:ubuntu>` for "
"details."
msgstr ""

#: ../docs/source/intro/installation.rst:72
msgid ""
"See :ref:`MacOS X (Homebrew) instructions<intro:install:prerequisites:brew>`"
" for details."
msgstr ""

#: ../docs/source/intro/installation.rst:84
msgid ""
"See :ref:`MacOS X (MacPorts) "
"instructions<intro:install:prerequisites:macports>` for details."
msgstr ""

#: ../docs/source/intro/installation.rst:96
msgid ""
"See :ref:`Gentoo Linux instructions<intro:install:prerequisites:gentoo>` for"
" details."
msgstr ""

#: ../docs/source/intro/installation.rst:108
msgid ""
"Then RabbitMQ must be `installed directly on Windows "
"<https://www.rabbitmq.com/install-windows.html>`__. See :ref:`WSL "
"instructions<intro:install:prerequisites:wsl>` for details."
msgstr ""

#: ../docs/source/intro/installation.rst:114
msgid "Ubuntu"
msgstr ""

#: ../docs/source/intro/installation.rst:116
msgid ""
"To install the prerequisites on Ubuntu and any other Debian derived "
"distribution, you can use the *apt* package manager. The following will "
"install the basic Python requirements and the *git* source control manager:"
msgstr ""

#: ../docs/source/intro/installation.rst:123
msgid ""
"To install the requirements for the ``postgres`` database run the following:"
msgstr ""

#: ../docs/source/intro/installation.rst:129
msgid "Install the RabbitMQ message broker:"
msgstr ""

#: ../docs/source/intro/installation.rst:135
msgid ""
"This installs and adds RabbitMQ as a system service. To check whether it is "
"running:"
msgstr ""

#: ../docs/source/intro/installation.rst:141
msgid "If it is not running already, it should after a reboot."
msgstr ""

#: ../docs/source/intro/installation.rst:143
msgid "Finally install the aiida-core Python environment:"
msgstr ""

#: ../docs/source/intro/installation.rst:153
#: ../docs/source/intro/installation.rst:196
#: ../docs/source/intro/installation.rst:251
msgid ""
"For a more detailed description of database requirements and usage see the "
":ref:`database topic<topics:database>`."
msgstr ""

#: ../docs/source/intro/installation.rst:154
msgid ""
"For problems with installing RabbitMQ, refer to the detailed instructions "
"provided on the `RabbitMQ website for Debian based distributions "
"<https://www.rabbitmq.com/install-debian.html>`_."
msgstr ""

#: ../docs/source/intro/installation.rst:159
msgid "Mac OS X (homebrew)"
msgstr ""

#: ../docs/source/intro/installation.rst:161
msgid ""
"For Mac OS we recommend using the `Homebrew`_ package manager. If you have "
"not installed Homebrew yet, see their `installation guide "
"<https://docs.brew.sh/Installation>`__."
msgstr ""

#: ../docs/source/intro/installation.rst:166
msgid ""
"After you have installed Homebrew, you can install the basic requirements as"
" follows:"
msgstr ""

#: ../docs/source/intro/installation.rst:172
msgid ""
"To start the ``postgres`` database server and ``rabbitmq`` service, execute:"
msgstr ""

#: ../docs/source/intro/installation.rst:179
msgid ""
"You can check whether it is running by checking the status through the "
"command:"
msgstr ""

#: ../docs/source/intro/installation.rst:185
#: ../docs/source/intro/installation.rst:234
msgid "Finally install the aiida-core python environment:"
msgstr ""

#: ../docs/source/intro/installation.rst:197
msgid ""
"For problems with installing RabbitMQ, refer to the detailed instructions "
"provided on the `RabbitMQ website for Homebrew based distributions "
"<https://www.rabbitmq.com/install-homebrew.html>`_."
msgstr ""

#: ../docs/source/intro/installation.rst:198
#: ../docs/source/intro/installation.rst:252
msgid ""
"For details on the installation of the ``pip`` package manager, refer to "
"`their documentation "
"<https://pip.pypa.io/en/stable/installing/#installation>`_"
msgstr ""

#: ../docs/source/intro/installation.rst:203
msgid "Mac OS X (MacPorts)"
msgstr ""

#: ../docs/source/intro/installation.rst:207
msgid "Another package manager for MacOS is `macports`_."
msgstr ""

#: ../docs/source/intro/installation.rst:213
msgid "To start the ``postgres`` database server, run:"
msgstr ""

#: ../docs/source/intro/installation.rst:220
msgid "To start the ``rabbitmq`` server, run:"
msgstr ""

#: ../docs/source/intro/installation.rst:226
msgid "You can check whether it is running as follows:"
msgstr ""

#: ../docs/source/intro/installation.rst:242
#: ../docs/source/intro/installation.rst:283
msgid "Trouble Installing RabbitMQ?"
msgstr ""

#: ../docs/source/intro/installation.rst:245
msgid ""
"Be sure to install ``rabbitmq-server 3.7.9`` or later. If ``rabbitmqctl "
"status`` returns an error \"Hostname mismatch\", the easiest solution can be"
" to simply ``sudo port uninstall`` the package and install it again."
msgstr ""

#: ../docs/source/intro/installation.rst:257
msgid "Gentoo Linux"
msgstr ""

#: ../docs/source/intro/installation.rst:259
msgid ""
"To install RabbitMQ on a Gentoo distribution through the ``portage`` package"
" manager run the following command:"
msgstr ""

#: ../docs/source/intro/installation.rst:265
msgid "To make sure that RabbitMQ is started at system boot, execute:"
msgstr ""

#: ../docs/source/intro/installation.rst:271
msgid "If you want to manually start the RabbitMQ server you can use:"
msgstr ""

#: ../docs/source/intro/installation.rst:277
msgid "Make sure that RabbitMQ is running with:"
msgstr ""

#: ../docs/source/intro/installation.rst:286
msgid "If you have encounter the following error"
msgstr ""

#: ../docs/source/intro/installation.rst:292
msgid ""
"Remove the mentioned option from the file ``/usr/libexec/rabbitmq/rabbitmq-"
"env`` and restart the server. If you still have trouble getting RabbitMQ to "
"run, please refer to the detailed instructions provided on the `website of "
"RabbitMQ itself for generic Unix systems <https://www.rabbitmq.com/install-"
"generic-unix.html>`_."
msgstr ""

#: ../docs/source/intro/installation.rst:299
msgid "Windows Subsystem for Linux (Ubuntu)"
msgstr ""

#: ../docs/source/intro/installation.rst:301
msgid ""
"The guide for Ubuntu above can generally be followed, but there are a few "
"things to note:"
msgstr ""

#: ../docs/source/intro/installation.rst:303
#: ../docs/source/intro/installation.rst:317
msgid "Tip"
msgstr ""

#: ../docs/source/intro/installation.rst:306
msgid ""
"Installing `Ubuntu <https://www.microsoft.com/en-"
"gb/p/ubuntu/9nblggh4msv6?source=lp&activetab=pivot:overviewtab>`_ instead of"
" the version specific applications, will let you have the latest LTS "
"version."
msgstr ""

#: ../docs/source/intro/installation.rst:308
msgid ""
"The `Windows native RabbitMQ <https://www.rabbitmq.com/install-"
"windows.html>`_ should be installed and started. (For WSL 2, this should not"
" be necessary.)"
msgstr ""

#: ../docs/source/intro/installation.rst:311
msgid ""
"Linux services under WSL are not started automatically. To start the "
"PostgreSQL and RabbitMQ-server services, type the commands below in the "
"terminal::"
msgstr ""

#: ../docs/source/intro/installation.rst:320
msgid ""
"These services may be run at startup *without* passing a password in the "
"following way:"
msgstr ""

#: ../docs/source/intro/installation.rst:322
msgid ""
"Create a ``.sh`` file with the lines above, but *without* ``sudo``. Make the"
" file executeable, i.e., type:"
msgstr ""

#: ../docs/source/intro/installation.rst:330
msgid "And add the line:"
msgstr ""

#: ../docs/source/intro/installation.rst:336
msgid ""
"Replacing ``<username>`` with your Ubuntu username. This will allow you to "
"run *only* this specific ``.sh`` file with ``root`` access (without "
"password), without lowering security on the rest of your system."
msgstr ""

#: ../docs/source/intro/installation.rst:339
msgid ""
"There is a `known issue <https://github.com/Microsoft/WSL/issues/856>`_ in "
"WSL Ubuntu 18.04 where the timezone is not configured correctly out-of-the-"
"box, which may cause problem for the database. The following command can be "
"used to re-configure the time zone:"
msgstr ""

#: ../docs/source/intro/installation.rst:346
msgid ""
"The file open limit may need to be raised using ``ulimit -n 2048`` (default "
"is 1024), when running tests. You can check the limit by using ``ulimit "
"-n``."
msgstr ""

#: ../docs/source/intro/installation.rst:349
msgid "This may need to be run every time the system starts up."
msgstr ""

#: ../docs/source/intro/installation.rst:351
msgid ""
"It may be worth considering adding some of these commands to your "
"``~/.bashrc`` file, since some of these settings may reset upon reboot."
msgstr ""

#: ../docs/source/intro/installation.rst:356
msgid ""
"For using WSL as a developer, please see the considerations made in our "
"`wiki-page for developers <https://github.com/aiidateam/aiida-core/wiki"
"/Development-environment#using-windows-subsystem-for-linux-wsl>`_."
msgstr ""

#: ../docs/source/intro/installation.rst:361
msgid "Using virtual environments"
msgstr ""

#: ../docs/source/intro/installation.rst:363
msgid ""
"AiiDA depends on a number of third party python packages, and usually on "
"specific versions of those packages. In order not to interfere with third "
"party packages needed by other software on your system, we **strongly** "
"recommend isolating AiiDA in a virtual python environment."
msgstr ""

#: ../docs/source/intro/installation.rst:366
msgid "Additional Information"
msgstr ""

#: ../docs/source/intro/installation.rst:369
msgid ""
"A very good tutorial on Python environments is provided by `realpython.com "
"<https://realpython.com/effective-python-environment>`__."
msgstr ""

#: ../docs/source/intro/installation.rst:371
msgid ""
"`venv <https://docs.python.org/3/library/venv.html>`__ is module included "
"directly with python for creating virtual environments. To create a virtual "
"environment, in a given directory, run:"
msgstr ""

#: ../docs/source/intro/installation.rst:378
msgid ""
"The command to activate the environment is shell specific (see `the "
"documentation <https://docs.python.org/3/library/venv.html#creating-virtual-"
"environments>`__. With bash the following command is used:"
msgstr ""

#: ../docs/source/intro/installation.rst:385
msgid "To leave or deactivate the environment, simply run:"
msgstr ""

#: ../docs/source/intro/installation.rst:391
msgid "Update install tools"
msgstr ""

#: ../docs/source/intro/installation.rst:394
msgid ""
"You may need to install ``pip`` and ``setuptools`` in your virtual "
"environment in case the system or user version of these tools is old"
msgstr ""

#: ../docs/source/intro/installation.rst:400
msgid ""
"If you have `Conda`_ installed then you can directly create a new "
"environment with ``aiida-core`` and (optionally) Postgres and RabbitMQ "
"installed."
msgstr ""

#: ../docs/source/intro/installation.rst:412
msgid "Installing the aiida-core package"
msgstr ""

#: ../docs/source/intro/installation.rst:419
msgid ""
"AiiDA can be installed either from the python package index `PyPI`_, "
"`Anaconda Cloud`_ (both good for general use) or directly from the aiida-"
"core `github repository`_ (good for developers)."
msgstr ""

#: ../docs/source/intro/installation.rst:421
msgid ""
"With your virtual environment active (see above), install the ``aiida-core``"
" python package from `PyPI`_ using:"
msgstr ""

#: ../docs/source/intro/installation.rst:427
msgid "Installing AiiDA in your system environment"
msgstr ""

#: ../docs/source/intro/installation.rst:430
msgid ""
"Consider adding the ``--user`` flag to avoid the need for administrator "
"privileges."
msgstr ""

#: ../docs/source/intro/installation.rst:432
msgid ""
"Or, if using `Conda`_, from the `Anaconda Cloud <https://anaconda.org/conda-"
"forge/aiida-core>`__:"
msgstr ""

#: ../docs/source/intro/installation.rst:440
msgid ""
"`aiida-core.services <https://anaconda.org/conda-forge/aiida-"
"core.services>`__ is an optional package to also install PostgreSQL and "
"RabbitMQ."
msgstr ""

#: ../docs/source/intro/installation.rst:442
msgid ""
"Alternatively, you can create a directory where to clone the AiiDA source "
"code and install AiiDA from source:"
msgstr ""

#: ../docs/source/intro/installation.rst:451
msgid ""
"There are additional optional packages that you may want to install, which "
"are grouped in the following categories:"
msgstr ""

#: ../docs/source/intro/installation.rst:453
msgid ""
"``atomic_tools``: packages that allow importing and manipulating crystal "
"structure from various formats"
msgstr ""

#: ../docs/source/intro/installation.rst:454
msgid ""
"``ssh_kerberos``: adds support for ssh transport authentication through "
"Kerberos"
msgstr ""

#: ../docs/source/intro/installation.rst:455
msgid "``REST``: allows a REST server to be ran locally to serve AiiDA data"
msgstr ""

#: ../docs/source/intro/installation.rst:456
msgid "``docs``: tools to build the documentation"
msgstr ""

#: ../docs/source/intro/installation.rst:457
msgid "``notebook``: jupyter notebook - to allow it to import AiiDA modules"
msgstr ""

#: ../docs/source/intro/installation.rst:458
msgid "``tests``: python modules required to run the automatic unit tests"
msgstr ""

#: ../docs/source/intro/installation.rst:459
msgid ""
"``pre-commit``: pre-commit tools required for developers to enable automatic"
" code linting and formatting"
msgstr ""

#: ../docs/source/intro/installation.rst:461
msgid ""
"In order to install any of these package groups, simply append them as a "
"comma separated list in the ``pip`` install command"
msgstr ""

#: ../docs/source/intro/installation.rst:467
msgid "Kerberos on Ubuntu"
msgstr ""

#: ../docs/source/intro/installation.rst:470
msgid ""
"If you are installing the optional ``ssh_kerberos`` and you are on Ubuntu "
"you might encounter an error related to the ``gss`` package. To fix this you"
" need to install the ``libffi-dev`` and ``libkrb5-dev`` packages:"
msgstr ""

#: ../docs/source/intro/installation.rst:477
msgid ""
"AiiDA uses the `reentry <https://pypi.org/project/reentry/>`_ package to "
"keep a fast cache of entry points for a snappy ``verdi`` cli. After "
"installing AiiDA packages, always remember to update the reentry cache "
"using:"
msgstr ""

#: ../docs/source/intro/installation.rst:487
msgid "Setting up the installation"
msgstr ""

#: ../docs/source/intro/installation.rst:492
msgid "AiiDA profile quicksetup"
msgstr ""

#: ../docs/source/intro/installation.rst:494
msgid ""
"After successful installation, you need to create an AiiDA profile via "
"AiiDA's command line interface ``verdi``."
msgstr ""

#: ../docs/source/intro/installation.rst:496
msgid "Most users should use the interactive quicksetup:"
msgstr ""

#: ../docs/source/intro/installation.rst:502
msgid ""
"which leads through the installation process and takes care of creating the "
"corresponding AiiDA database."
msgstr ""

#: ../docs/source/intro/installation.rst:504
msgid ""
"For maximum control and customizability, one can use ``verdi setup`` and set"
" up the database manually as explained below."
msgstr ""

#: ../docs/source/intro/installation.rst:506
#: ../docs/source/intro/installation.rst:694
msgid "Don't forget to backup your data!"
msgstr ""

#: ../docs/source/intro/installation.rst:509
#: ../docs/source/intro/installation.rst:697
msgid ""
"See the :ref:`installation backup how-to <how-to:installation:backup>`."
msgstr ""

#: ../docs/source/intro/installation.rst:511
msgid "Want to manage multiple profiles?"
msgstr ""

#: ../docs/source/intro/installation.rst:514
msgid "See the :ref:`managing profiles how-to <how-to:installation:profile>`."
msgstr ""

#: ../docs/source/intro/installation.rst:519
msgid "AiiDA profile custom setup"
msgstr ""

#: ../docs/source/intro/installation.rst:522
msgid "Creating the database"
msgstr ""

#: ../docs/source/intro/installation.rst:524
msgid ""
"AiiDA uses a database to store the nodes, node attributes and other "
"information, allowing the end user to perform fast queries of the results. "
"Currently, the highly performant `PostgreSQL`_ database is supported as a "
"database backend."
msgstr ""

#: ../docs/source/intro/installation.rst:529
msgid "Find out more about the database"
msgstr ""

#: ../docs/source/intro/installation.rst:534
msgid ":ref:`The database topic <topics:database>`."
msgstr ""

#: ../docs/source/intro/installation.rst:536
msgid ""
"To manually create the database for AiiDA, you need to run the program "
"``psql`` to interact with postgres. On most operating systems, you need to "
"do so as the ``postgres`` user that was created upon installing the "
"software. To assume the role of ``postgres`` run as root:"
msgstr ""

#: ../docs/source/intro/installation.rst:544
msgid ""
"(or, equivalently, type ``sudo su - postgres``, depending on your "
"distribution) and launch the postgres program:"
msgstr ""

#: ../docs/source/intro/installation.rst:550
msgid "Create a new database user account for AiiDA by running:"
msgstr ""

#: ../docs/source/intro/installation.rst:556
msgid "replacing ``<password>`` with a password of your choice."
msgstr ""

#: ../docs/source/intro/installation.rst:558
msgid ""
"You will need to provide the password again when you configure AiiDA to use "
"this database through ``verdi setup``. If you want to change the password "
"you just created use the command:"
msgstr ""

#: ../docs/source/intro/installation.rst:565
msgid ""
"Next, we create the database itself. We enforce the UTF-8 encoding and "
"specific locales:"
msgstr ""

#: ../docs/source/intro/installation.rst:571
msgid ""
"and grant all privileges on this DB to the previously-created ``aiida`` "
"user:"
msgstr ""

#: ../docs/source/intro/installation.rst:577
msgid ""
"You have now created a database for AiiDA and you can close the postgres "
"shell by typing ``\\q``. To test if the database was created successfully, "
"you can run the following command as a regular user in a bash terminal:"
msgstr ""

#: ../docs/source/intro/installation.rst:584
msgid ""
"and type the password you inserted before, when prompted. If everything "
"worked well, you should get no error and see the prompt of the ``psql`` "
"shell."
msgstr ""

#: ../docs/source/intro/installation.rst:587
msgid ""
"If you use the same names as in the example commands above, then during the "
"``verdi setup`` phase the following parameters will apply to the newly "
"created database:"
msgstr ""

#: ../docs/source/intro/installation.rst:598
msgid "Don't forget to backup your database!"
msgstr ""

#: ../docs/source/intro/installation.rst:601
msgid ""
"See the :ref:`Database backup how-to <how-"
"to:installation:backup:postgresql>`), and :ref:`how to move your database "
"<how-to:installation:performance>`."
msgstr ""

#: ../docs/source/intro/installation.rst:604
msgid "Database setup using 'peer' authentication"
msgstr ""

#: ../docs/source/intro/installation.rst:606
msgid ""
"On Ubuntu Linux, the default PostgreSQL setup is configured to use ``peer`` "
"authentication, which allows password-less login via local Unix sockets. In "
"this mode, PostgreSQL compares the Unix user connecting to the socket with "
"its own database of users and allows a connection if a matching user exists."
msgstr ""

#: ../docs/source/intro/installation.rst:611
msgid ""
"This is an alternative route to set up your database - the standard approach"
" will work on Ubuntu just as well."
msgstr ""

#: ../docs/source/intro/installation.rst:613
msgid ""
"Below we are going to take advantage of the command-line utilities shipped "
"on Ubuntu to simplify creating users and databases compared to issuing the "
"SQL commands directly."
msgstr ""

#: ../docs/source/intro/installation.rst:615
msgid "Assume the role of ``postgres``:"
msgstr ""

#: ../docs/source/intro/installation.rst:621
msgid ""
"Create a database user with the **same name** as the UNIX user who will be "
"running AiiDA (usually your login name):"
msgstr ""

#: ../docs/source/intro/installation.rst:627
msgid "replacing ``<username>`` with your username."
msgstr ""

#: ../docs/source/intro/installation.rst:629
msgid "Next, create the database itself with your user as the owner:"
msgstr ""

#: ../docs/source/intro/installation.rst:635
msgid ""
"Exit the shell to go back to your login user. To test if the database was "
"created successfully, try:"
msgstr ""

#: ../docs/source/intro/installation.rst:642
msgid ""
"During the ``verdi setup`` phase, use ``!`` to leave host empty and specify "
"your Unix user name as the *AiiDA Database user*.:"
msgstr ""

#: ../docs/source/intro/installation.rst:654
msgid "verdi setup"
msgstr ""

#: ../docs/source/intro/installation.rst:656
msgid "After the database has been created, do:"
msgstr ""

#: ../docs/source/intro/installation.rst:662
msgid ""
"where `<profile_name>` is a profile name of your choosing. The ``verdi "
"setup`` command will guide you through the setup process through a series of"
" prompts."
msgstr ""

#: ../docs/source/intro/installation.rst:665
msgid ""
"The first information asked is your email, which will be used to associate "
"the calculations to you. In AiiDA, the email is your username, and acts as a"
" unique identifier when importing/exporting data from AiiDA."
msgstr ""

#: ../docs/source/intro/installation.rst:670
msgid ""
"The password, in the current version of AiiDA, is not used (it will be used "
"only in the REST API and in the web interface). If you leave the field "
"empty, no password will be set and no access will be granted to the user via"
" the REST API and the web interface."
msgstr ""

#: ../docs/source/intro/installation.rst:673
msgid ""
"Then, the following prompts will help you configure the database. Typical "
"settings are:"
msgstr ""

#: ../docs/source/intro/installation.rst:702
msgid "Starting the daemon"
msgstr ""

#: ../docs/source/intro/installation.rst:704
msgid ""
"The AiiDA daemon process runs in the background and takes care of processing"
" your submitted calculations and workflows, checking their status, "
"retrieving their results once they are finished and storing them in the "
"AiiDA database."
msgstr ""

#: ../docs/source/intro/installation.rst:706
msgid "The AiiDA daemon is controlled using three simple commands:"
msgstr ""

#: ../docs/source/intro/installation.rst:708
msgid "``verdi daemon start``: start the daemon"
msgstr ""

#: ../docs/source/intro/installation.rst:709
msgid "``verdi daemon status``: check the status of the daemon"
msgstr ""

#: ../docs/source/intro/installation.rst:710
msgid "``verdi daemon stop``: stop the daemon"
msgstr ""

#: ../docs/source/intro/installation.rst:714
msgid ""
"While operational, the daemon logs its activity to a file in "
"``~/.aiida/daemon/log/`` (or, more generally, "
"``$AIIDA_PATH/.aiida/daemon/log``). Get the latest log messages via ``verdi "
"daemon logshow``."
msgstr ""

#: ../docs/source/intro/installation.rst:720
msgid "Final checks"
msgstr ""

#: ../docs/source/intro/installation.rst:722
msgid ""
"Use the ``verdi status`` command to check that all services are up and "
"running:"
msgstr ""

#: ../docs/source/intro/installation.rst:734
msgid ""
"In the example output, all service have a green check mark and so should be "
"running as expected."
msgstr ""

#: ../docs/source/intro/installation.rst:736
msgid "Are you in your virtual environment?"
msgstr ""

#: ../docs/source/intro/installation.rst:739
msgid ""
"Remember that in order to work with AiiDA through for example the ``verdi`` "
"command, you need to be in your virtual environment. If you open a new "
"terminal for example, be sure to activate it first, e.g. for venv:"
msgstr ""

#: ../docs/source/intro/installation.rst:746
msgid "Want to manage your install?"
msgstr ""

#: ../docs/source/intro/installation.rst:749
msgid "See the :ref:`Installation how-to <how-to:installation>`"
msgstr ""

#: ../docs/source/intro/installation.rst:751
msgid ""
":link-badge:`how-to:installation:configure,Configuring,ref,badge-primary "
"text-white` :link-badge:`how-to:installation:update,Updating,ref,badge-"
"primary text-white` :link-badge:`how-to:installation:backup:software"
",Backing-up,ref,badge-primary text-white`"
msgstr ""

#: ../docs/source/intro/installation.rst:755
#: ../docs/source/intro/installation.rst:897
msgid "What next?"
msgstr ""

#: ../docs/source/intro/installation.rst:758
#: ../docs/source/intro/installation.rst:900
msgid "Try out the :ref:`Basic Tutorial <tutorial:basic>`."
msgstr ""

#: ../docs/source/intro/installation.rst:763
msgid "Using AiiDA in Jupyter"
msgstr ""

#: ../docs/source/intro/installation.rst:765
msgid ""
"`Jupyter <http://jupyter.org>`_ is an open-source web application that "
"allows you to create in-browser notebooks containing live code, "
"visualizations and formatted text."
msgstr ""

#: ../docs/source/intro/installation.rst:767
msgid ""
"Originally born out of the iPython project, it now supports code written in "
"many languages and customized iPython kernels."
msgstr ""

#: ../docs/source/intro/installation.rst:769
msgid ""
"If you didn't already install AiiDA with the ``[notebook]`` option (during "
"``pip install``), run ``pip install jupyter`` **inside** the virtualenv, and"
" then run **from within the virtualenv**:"
msgstr ""

#: ../docs/source/intro/installation.rst:775
msgid ""
"This will open a tab in your browser. Click on ``New -> Python`` and type:"
msgstr ""

#: ../docs/source/intro/installation.rst:781
msgid ""
"followed by ``Shift-Enter``. If no exception is thrown, you can use AiiDA in"
" Jupyter."
msgstr ""

#: ../docs/source/intro/installation.rst:783
msgid ""
"If you want to set the same environment as in a ``verdi shell``, add the "
"following code to a ``.py`` file (create one if there isn't any) in "
"``<home_folder>/.ipython/profile_default/startup/``:"
msgstr ""

#: ../docs/source/intro/installation.rst:802
msgid ""
"This file will be executed when the ipython kernel starts up and enable the "
"line magic ``%aiida``. Alternatively, if you have a ``aiida-core`` "
"repository checked out locally, you can just copy the file ``<aiida-"
"core>/aiida/tools/ipython/aiida_magic_register.py`` to the same folder. The "
"current ipython profile folder can be located using:"
msgstr ""

#: ../docs/source/intro/installation.rst:811
msgid ""
"After this, if you open a Jupyter notebook as explained above and type in a "
"cell:"
msgstr ""

#: ../docs/source/intro/installation.rst:817
msgid ""
"followed by ``Shift-Enter``. You should receive the message \"Loaded AiiDA "
"DB environment.\" This line magic should also be enabled in standard ipython"
" shells."
msgstr ""

#: ../docs/source/intro/installation.rst:824
msgid "Using the Docker image"
msgstr ""

#: ../docs/source/intro/installation.rst:826
msgid ""
"AiiDA maintains a `Docker <https://www.docker.com/>`__ image on `Docker Hub "
"<https://hub.docker.com/r/aiidateam/aiida-core>`__. This image contains a "
"pre-configured AiiDA environment, and so is particularly useful for learning"
" and testing purposes. It is a great way to quickly get started on the "
"tutorials!"
msgstr ""

#: ../docs/source/intro/installation.rst:830
msgid ""
"Follow Docker's `install guide <https://docs.docker.com/get-docker/>`__ to "
"download Docker and start its daemon. Now you can pull the aiida-core image "
"straight from Docker Hub, for a specific version."
msgstr ""

#: ../docs/source/intro/installation.rst:837
msgid "We can start a container running by:"
msgstr ""

#: ../docs/source/intro/installation.rst:843
msgid ""
"The container comes installed with all required services and, on start-up, "
"will automatically start them and create an AiiDA profile (plus a localhost "
"computer). To (optionally) wait for the services to start and inspect the "
"start-up process, we can run:"
msgstr ""

#: ../docs/source/intro/installation.rst:851
msgid ""
"The profile is created under the ``aiida`` username, so to execute commands "
"use:"
msgstr ""

#: ../docs/source/intro/installation.rst:863
msgid "Or to enter into the container interactively:"
msgstr ""

#: ../docs/source/intro/installation.rst:869
msgid ""
"If you stop the container and start it again, any data you created will "
"persist."
msgstr ""

#: ../docs/source/intro/installation.rst:876
msgid "But if you remove the container all data will be removed."
msgstr ""

#: ../docs/source/intro/installation.rst:883
msgid ""
"To store data and even share it between containers, you may wish to `add a "
"volume <https://docs.docker.com/storage/volumes/>`__:"
msgstr ""

#: ../docs/source/intro/installation.rst:889
msgid ""
"Now anything that you save to the ``/tmp/my_data`` folder will be saved to "
"the volume persistently. You can even add files directly to the folder "
"outside of the container, by finding its mounting point:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:5
msgid "Troubleshooting"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:7
msgid ""
"If you experience any problems, first check that all services are up and "
"running:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:19
msgid ""
"In the example output, all service have a green check mark and so should be "
"running as expected. If all services are up and running and you are still "
"experiencing problems or if you have trouble with the installation of aiida-"
"core and related services, consider the commonly encountered problems below."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:23
msgid "Installation issues"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:26
msgid "numpy dependency"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:28
msgid ""
"On a clean Ubuntu 16.04 install the pip install command ``pip install -e "
"aiida-core`` may fail due to a problem with dependencies on the ``numpy`` "
"package. In this case you may be presented with a message like the "
"following:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:36
msgid ""
"To fix this, simply install ``numpy`` individually through pip in your "
"virtual env, i.e.:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:42
msgid "followed by executing the original install command once more:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:48
msgid "This should fix the dependency error."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:51
msgid "Database installation and location"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:53
msgid ""
"If the installation fails while installing the packages related to the "
"database, you may have not installed or set up the database libraries."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:55
msgid ""
"In particular, on Mac OS X, if you installed the binary package of "
"PostgreSQL, it is possible that the PATH environment variable is not set "
"correctly, and you get a \"Error: pg_config executable not found.\" error. "
"In this case, discover where the binary is located, then add a line to your "
"``~/.bashrc`` file similar to the following:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:62
msgid ""
"and then open a new bash shell. Some possible paths can be found at this "
"`Stackoverflow link`_ and a non-exhaustive list of possible paths is the "
"following (version number may change):"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:65
msgid "``/Applications/Postgres93.app/Contents/MacOS/bin``"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:66
msgid "``/Applications/Postgres.app/Contents/Versions/9.3/bin``"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:67
msgid "``/Library/PostgreSQL/9.3/bin/pg_config``"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:69
msgid ""
"Similarly, if the package installs but then errors occur during the first of"
" AiiDA (with ``Symbol not found`` errors or similar), you may need to point "
"to the path where the dynamical libraries are. A way to do it is to add a "
"line similar to the following to the ``~/.bashrc`` and then open a new "
"shell:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:76
msgid "(you should of course adapt the path to the PostgreSQL libraries)."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:81
msgid "RabbitMQ Installation (Unix)"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:83
msgid ""
"If in ``verdi status`` RabbitMQ is not connected, first check that RabbitMQ "
"is actually running:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:93
msgid ""
"By default, AiiDA profiles are configured to connect to RabbitMQ *via* "
"``amqp://guest:guest@127.0.0.1:5672``, hence this port should be open for "
"connections. In Linux / Mac OSX you can also check which ports a PID has "
"open using:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:105
msgid ""
"If a connection cannot be found, try starting ``rabbitmq-server`` in non-"
"detached mode. If you encounter an output similar to that below, it may be "
"that your versions of RabbitMQ and erlang (the programming language which "
"RabbitMQ is written in) are incompatible."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:136
msgid "You can check your version of erlang using:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:143
msgid "and your version of rabbitmq-server with:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:150
msgid ""
"Then see `RabbitMQ Erlang Version Requirements <https://www.rabbitmq.com"
"/which-erlang.html>`__, to check if these are compatible, and reinstall as "
"appropriate."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:152
msgid ""
"See also the `RabbitMQ Troubleshooting "
"<https://www.rabbitmq.com/troubleshooting.html>`__ for further information."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:155
msgid "Ensuring a UTF-8 locale"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:157
msgid ""
"For some reasons, on some machines (notably often on Mac OS X) there is no "
"default locale defined, and when you run ``verdi setup`` for the first time "
"it fails (see also `this issue`_ of django). Run in your terminal (or maybe "
"even better, add to your ``.bashrc``, but then remember to open a new shell "
"window!):"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:165
msgid "and then run ``verdi setup`` again."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:170
msgid "Possible Ubuntu dependencies"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:172
msgid ""
"Several users reported the need to install also ``libpq-dev`` (header files "
"for libpq5 - PostgreSQL library):"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:178
msgid "But under Ubuntu 12.04 this is not needed."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:181
msgid "verdi not in PATH"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:183
msgid ""
"Installing the ``aiida-core`` python package *should* add the ``verdi`` CLI "
"to your ``PATH`` automatically."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:185
msgid ""
"If the ``verdi`` executable is not available in your terminal, the folder "
"where ``pip`` places binaries may not be added to your ``PATH``"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:187
msgid ""
"For Linux systems, this folder is usually something like ``~/.local/bin``:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:193
msgid ""
"For Mac OS X systems, the path to add is usually "
"``~/Library/Python/2.7/bin``:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:199
msgid ""
"After updating your ``PATH``, the ``verdi`` command should be available."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:203
msgid ""
"A preprequisite for ``verdi`` to work is that the ``aiida`` python package "
"is importable. Test this by opening a ``python`` or ``ipython`` shell and "
"typing:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:210
msgid ""
"If you get an ``ImportError`` (and you are in the environment where AiiDA "
"was installed), you can add it to the ``PYTHONPATH`` manually:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:218
msgid "Configuring remote SSH computers"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:221
msgid "ssh_kerberos installation"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:223
msgid ""
"When installing the ``ssh_kerberos`` *optional* requirement through Anaconda"
" you may encounter the following error on Ubuntu machines:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:229
msgid ""
"This is related to an open issue in anaconda `ContinuumIO/anaconda-"
"issues#686`_. A potential solution is to run the following command:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:239
msgid "Output from .bashrc and/or .bash_profile on remote computers"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:243
msgid "This also applies to computers configured via ``local`` transport."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:245
msgid ""
"When connecting to remote computers, AiiDA (like other codes as ``sftp``) "
"can get confused if you have code in your ``.bashrc`` or ``.bash_profile`` "
"that produces output or e.g. runs commands like ``clean`` that require a "
"terminal."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:247
msgid ""
"For instance, if you add a ``echo \"a\"`` in your ``.bashrc`` and then try "
"to SFTP a file from it, you will get an error like ``Received message too "
"long 1091174400``."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:249
msgid ""
"If you still want to have code that needs an interactive shell (``echo``, "
"``clean``, ...), but you want to disable it for non-interactive shells, put "
"at the top of your file a guard like this:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:258
msgid "Everything below this will not be executed in a non-interactive shell."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:262
msgid ""
"Still, you might want to have some code on top, like e.g. setting the PATH "
"or similar, if this needs to be run also in the case of non-interactive "
"shells."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:264
msgid ""
"To test if a the computer does not produce spurious output, run (after "
"configuring):"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:270
msgid ""
"which checks and, in case of problems, suggests how to solve the problem."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:276
msgid "Improvements for dependencies"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:279
msgid "Activating the ASE visualizer"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:281
msgid ""
"Within a virtual environment, attempt to visualize a structure with ``ase`` "
"(either from the shell, or using the command ``verdi data structure show "
"--format=ase <PK>``), might end up with the following error message::"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:285
msgid ""
"The issue is that ``pygtk`` is currently not pip-installable. One has to "
"install it separately and create the appropriate bindings manually in the "
"virtual environment. You can follow the following procedure to get around "
"this issue:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:288
msgid "Install the ``python-gtk2`` package. Under Ubuntu, do:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:294
msgid ""
"Create the ``lib/python2.7/dist-packages`` folder within your virtual "
"environment:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:301
msgid ""
"where ``<AIIDA_VENV_FOLDER>`` is the virtual environment folder you have "
"created during the installation process."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:304
msgid ""
"Create several symbolic links from this folder, pointing to a number of "
"files in ``/usr/lib/python2.7/dist-packages/``:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:316
msgid ""
"After that, ``verdi data structure show --format=ase <PK>`` should work."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:319
msgid "Use in ipython/jupyter"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:321
msgid ""
"In order to use the AiiDA objects and functions in Jupyter, this latter has "
"to be instructed to use the iPython kernel installed in the AiiDA virtual "
"environment. This happens by default if you install AiiDA with ``pip`` "
"including the ``notebook`` option and run Jupyter from the AiiDA virtual "
"environment."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:324
msgid ""
"If, for any reason, you do not want to install Jupyter in the virtual "
"environment, you might consider to install it out of the virtual "
"environment, if not already done:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:330
msgid "Then, activate the AiiDA virtual environment:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:336
msgid "and setup the AiiDA iPython kernel:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:343
msgid "where you have chosen a meaningful name for the new kernel."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:345
msgid "Finally, start a Jupyter server:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:351
msgid ""
"and from the newly opened browser tab select ``New -> <aiida.kernel.name>``"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:356
msgid "Increasing the logging verbosity"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:358
msgid ""
"By default, the logging level of AiiDA is minimal to avoid too much noise in"
" the logfiles. Only warnings and errors are logged to the daemon log files, "
"while info and debug messages are discarded."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:361
msgid ""
"If you are experiencing a problem, you can increase the default minimum "
"logging level of AiiDA messages, with:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:367
msgid ""
"You might also be interested in reviewing the circus log messages (the "
"``circus`` library is the daemonizer that manages the daemon runners),"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:373
msgid ""
"however those messages are usually only relevant to debug AiiDA internals."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:375
msgid ""
"For each profile that runs a daemon, there are two unique logfiles, one for "
"AiiDA log messages (named ``aiida-<profile_name>.log``) and one for the "
"circus logs (named ``circus-<profile_name>.log``). Those files can be found "
"in the ``~/.aiida/daemon/log`` folder."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:378
msgid ""
"After restarting the daemon (``verdi daemon restart``), the number of "
"messages logged will increase significantly and may help in determining the "
"source of the problem."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:382
msgid ""
"Besides ``DEBUG``, you can also use the levels defined in the `standard "
"Python logging module <https://docs.python.org/3/library/logging.html"
"#logging-levels>`_. In addition to those, AiiDA defines the custom "
"``REPORT`` level, which, with a value of ``23``, is more verbose than the "
"``WARNING`` level, but less verbose than ``INFO``. The ``REPORT`` level is "
"AiiDA's default logging level."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:386
msgid ""
"When the problem is solved, we suggest to reset the default logging level, "
"with:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:393
msgid "to avoid too much noise in the logfiles."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:395
msgid "The config options set for the current profile can be viewed using"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:401
msgid "in the ``options`` row."
msgstr ""

#: ../docs/source/intro/tutorial.rst:12
msgid "Basic tutorial"
msgstr ""

#: ../docs/source/intro/tutorial.rst:14
msgid ""
"Welcome to the AiiDA tutorial! The goal of this tutorial is to give you a "
"basic idea of how AiiDA helps you in executing data-driven workflows. At the"
" end of this tutorial you will know how to:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:18
msgid "Store data in the database and subsequently retrieve it."
msgstr ""

#: ../docs/source/intro/tutorial.rst:19
msgid ""
"Decorate a Python function such that its inputs and outputs are "
"automatically tracked."
msgstr ""

#: ../docs/source/intro/tutorial.rst:20
msgid "Run and monitor the status of processes."
msgstr ""

#: ../docs/source/intro/tutorial.rst:21
msgid "Explore and visualize the provenance graph."
msgstr ""

#: ../docs/source/intro/tutorial.rst:25
msgid ""
"If you are working on your own machine, note that the tutorial assumes that "
"you have a working AiiDA installation, and have set up your AiiDA profile in"
" the current Python environment. If this is not the case, consult the "
":ref:`getting started page<intro:get_started>`."
msgstr ""

#: ../docs/source/intro/tutorial.rst:29
msgid "Provenance"
msgstr ""

#: ../docs/source/intro/tutorial.rst:31
msgid ""
"Before we dive in, we need to briefly introduce one of the most important "
"concepts for AiiDA: *provenance*. An AiiDA database does not only contain "
"the results of your calculations, but also their inputs and each step that "
"was executed to obtain them. All of this information is stored in the form "
"of a *directed acyclic graph* (DAG). As an example, "
":numref:`fig_intro_workchain_graph` shows the provenance of the calculations"
" of this tutorial."
msgstr ""

#: ../docs/source/intro/tutorial.rst:41
msgid "Provenance Graph of a basic AiiDA WorkChain."
msgstr ""

#: ../docs/source/intro/tutorial.rst:43
msgid ""
"In the provenance graph, you can see different types of *nodes* represented "
"by different shapes. The green ellipses are ``Data`` nodes, the blue ellipse"
" is a ``Code`` node, and the rectangles represent *processes*, i.e. the "
"calculations performed in your *workflow*."
msgstr ""

#: ../docs/source/intro/tutorial.rst:46
msgid ""
"The provenance graph allows us to not only see what data we have, but also "
"how it was produced. During this tutorial we will be using AiiDA to generate"
" the provenance graph in :numref:`fig_intro_workchain_graph` step by step."
msgstr ""

#: ../docs/source/intro/tutorial.rst:50
msgid "Data nodes"
msgstr ""

#: ../docs/source/intro/tutorial.rst:52
msgid ""
"Before running any calculations, let's create and store a *data node*. AiiDA"
" ships with an interactive IPython shell that has many basic AiiDA classes "
"pre-loaded. To start the IPython shell, simply type in the terminal:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:60
msgid ""
"AiiDA implements data node types for the most common types of data (int, "
"float, str, etc.), which you can extend with your own (composite) data node "
"types if needed. For this tutorial, we'll keep it very simple, and start by "
"initializing an ``Int`` node and assigning it to the `node` variable:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:67
msgid "We can check the contents of the ``node`` variable like this:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:74
msgid "Quite a bit of information on our freshly created node is returned:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:76
msgid "The data node is of the type ``Int``"
msgstr ""

#: ../docs/source/intro/tutorial.rst:77
msgid ""
"The node has the *universally unique identifier* (**UUID**) ``eac48d2b-ae20"
"-438b-aeab-2d02b69eb6a8``"
msgstr ""

#: ../docs/source/intro/tutorial.rst:78
msgid "The node is currently not stored in the database ``(unstored)``"
msgstr ""

#: ../docs/source/intro/tutorial.rst:79
msgid "The integer value of the node is ``2``"
msgstr ""

#: ../docs/source/intro/tutorial.rst:81
msgid "Let's store the node in the database:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:88
msgid ""
"As you can see, the data node has now been assigned a *primary key* "
"(**PK**), a number that identifies the node in your database ``(pk: 1)``. "
"The PK and UUID both reference the node with the only difference that the PK"
" is unique *for your local database only*, whereas the UUID is a globally "
"unique identifier and can therefore be used between *different* databases. "
"Use the PK only if you are working within a single database, i.e. in an "
"interactive session and the UUID in all other cases."
msgstr ""

#: ../docs/source/intro/tutorial.rst:94
msgid ""
"The PK numbers shown throughout this tutorial assume that you start from a "
"completely empty database. It is possible that the nodes' PKs will be "
"different for your database!"
msgstr ""

#: ../docs/source/intro/tutorial.rst:97
msgid ""
"The UUIDs are generated randomly and are therefore **guaranteed** to be "
"different."
msgstr ""

#: ../docs/source/intro/tutorial.rst:99
msgid ""
"Next, let's leave the IPython shell by typing ``exit()`` and then enter. "
"Back in the terminal, use the ``verdi`` command line interface (CLI) to "
"check the data node we have just created:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:106
msgid "This prints something like the following:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:120
msgid ""
"Once again, we can see that the node is of type ``Int``, has PK = 1, and "
"UUID = ``eac48d2b-ae20-438b-aeab-2d02b69eb6a8``. Besides this information, "
"the ``verdi node show`` command also shows the (empty) ``label`` and "
"``description``, as well as the time the node was created (``ctime``) and "
"last modified (``mtime``)."
msgstr ""

#: ../docs/source/intro/tutorial.rst:123
msgid ""
"AiiDA already provides many standard data types, but you can also "
":ref:`create your own<how-to:data:plugin>`."
msgstr ""

#: ../docs/source/intro/tutorial.rst:126
msgid "Calculation functions"
msgstr ""

#: ../docs/source/intro/tutorial.rst:128
msgid ""
"Once your data is stored in the database, it is ready to be used for some "
"computational task. For example, let's say you want to multiply two ``Int`` "
"data nodes. The following Python function:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:137
msgid ""
"will give the desired result when applied to two ``Int`` nodes, but the "
"calculation will not be stored in the provenance graph. However, we can use "
"a `Python decorator <https://docs.python.org/3/glossary.html#term-"
"decorator>`_ provided by AiiDA to automatically make it part of the "
"provenance graph. Start up the AiiDA IPython shell again using ``verdi "
"shell`` and execute the following code snippet:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:149
msgid ""
"This converts the ``multiply`` function into an AiIDA *calculation "
"function*, the most basic execution unit in AiiDA. Next, load the ``Int`` "
"node you have created in the previous section using the ``load_node`` "
"function and the PK of the data node:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:156
msgid ""
"Of course, we need another integer to multiply with the first one. Let's "
"create a new ``Int`` data node and assign it to the variable ``y``:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:163
msgid "Now it's time to multiply the two numbers!"
msgstr ""

#: ../docs/source/intro/tutorial.rst:170
msgid ""
"Success! The ``calcfunction``-decorated ``multiply`` function has multiplied"
" the two ``Int`` data nodes and returned a new ``Int`` data node whose value"
" is the product of the two input nodes. Note that by executing the "
"``multiply`` function, all input and output nodes are automatically stored "
"in the database:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:179
msgid ""
"We had not yet stored the data node assigned to the ``y`` variable, but by "
"providing it as an input argument to the ``multiply`` function, it was "
"automatically stored with PK = 2. Similarly, the returned ``Int`` node with "
"value 6 has been stored with PK = 4."
msgstr ""

#: ../docs/source/intro/tutorial.rst:182
msgid ""
"Let's once again leave the IPython shell with ``exit()`` and look for the "
"process we have just run using the ``verdi`` CLI:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:188
msgid ""
"The returned list will be empty, but don't worry! By default, ``verdi "
"process list`` only returns the *active* processes. If you want to see *all*"
" processes (i.e. also the processes that are *terminated*), simply add the "
"``-a`` option:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:196
msgid "You should now see something like the following output:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:208
msgid ""
"We can see that our ``multiply`` calcfunction was created 1 minute ago, "
"assigned the PK 3, and has ``Finished``."
msgstr ""

#: ../docs/source/intro/tutorial.rst:210
msgid ""
"As a final step, let's have a look at the provenance of this simple "
"calculation. The provenance graph can be automatically generated using the "
"verdi CLI. Let's generate the provenance graph for the ``multiply`` "
"calculation function we have just run with PK = 3:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:218
msgid ""
"The command will write the provenance graph to a ``.pdf`` file. Use your "
"favorite PDF viewer to have a look. It should look something like the graph "
"shown in :numref:`fig_calcfun_graph`."
msgstr ""

#: ../docs/source/intro/tutorial.rst:227
msgid "Provenance graph of the ``multiply`` calculation function."
msgstr ""

#: ../docs/source/intro/tutorial.rst:229
msgid ""
"Remember that the PK of the ``CalcJob`` can be different for your database."
msgstr ""

#: ../docs/source/intro/tutorial.rst:232
msgid "CalcJobs"
msgstr ""

#: ../docs/source/intro/tutorial.rst:234
msgid ""
"When running calculations that require an external code or run on a remote "
"machine, a simple calculation function is no longer sufficient. For this "
"purpose, AiiDA provides the ``CalcJob`` process class."
msgstr ""

#: ../docs/source/intro/tutorial.rst:237
msgid ""
"To run a ``CalcJob``, you need to set up two things: a ``code`` that is "
"going to implement the desired calculation and a ``computer`` for the "
"calculation to run on. If you're running this tutorial in the Quantum Mobile"
" VM or on Binder, these have been pre-configured for you. If you're running "
"on your own machine, you can follow the instructions in the panel below:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:242
msgid ""
"Let's begin by setting up the computer using the ``verdi computer`` "
"subcommand:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:249
msgid "The first commands sets up the computer with the following options:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:251
msgid "*label* (``-L``): tutor"
msgstr ""

#: ../docs/source/intro/tutorial.rst:252
msgid "*hostname* (``-H``): localhost"
msgstr ""

#: ../docs/source/intro/tutorial.rst:253
msgid "*transport* (``-T``): local"
msgstr ""

#: ../docs/source/intro/tutorial.rst:254
msgid "*scheduler* (``-S``): direct"
msgstr ""

#: ../docs/source/intro/tutorial.rst:255
msgid ""
"*work-dir* (``-w``): The ``work`` subdirectory of the current directory"
msgstr ""

#: ../docs/source/intro/tutorial.rst:257
msgid ""
"The second command *configures* the computer with a minimum interval between"
" connections (``--safe-interval``) of 5 seconds. For both commands, the "
"*non-interactive* option (``-n``) is added to not prompt for extra input."
msgstr ""

#: ../docs/source/intro/tutorial.rst:260
msgid "Next, let's set up the code we're going to use for the tutorial:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:266
msgid ""
"This command sets up a code with *label* ``add`` on the *computer* "
"``tutor``, using the *plugin* ``arithmetic.add``."
msgstr ""

#: ../docs/source/intro/tutorial.rst:268
msgid ""
"A typical real-world example of a computer is a remote supercomputing "
"facility. Codes can be anything from a Python script to powerful *ab initio*"
" codes such as Quantum Espresso or machine learning tools like Tensorflow. "
"Let's have a look at the codes that are available to us:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:279
msgid ""
"You can see a single code ``add@tutor``, with PK = 5, in the printed list. "
"This code allows us to add two integers together. The ``add@tutor`` "
"identifier indicates that the code with label ``add`` is run on the computer"
" with label ``tutor``. To see more details about the computer, you can use "
"the following ``verdi`` command:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:302
msgid ""
"We can see that the *Work directory* has been set up as the ``work`` "
"subdirectory of the current directory. This is the directory in which the "
"calculations running on the ``tutor`` computer will be executed."
msgstr ""

#: ../docs/source/intro/tutorial.rst:307
msgid ""
"You may have noticed that the PK of the ``tutor`` computer is 1, same as the"
" ``Int`` node we created at the start of this tutorial. This is because "
"different entities, such as nodes, computers and groups, are stored in "
"different tables of the database. So, the PKs for each entity type are "
"unique for each database, but entities of different types can have the same "
"PK within one database."
msgstr ""

#: ../docs/source/intro/tutorial.rst:311
msgid ""
"Let's now start up the ``verdi shell`` again and load the ``add@tutor`` code"
" using its label:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:317
msgid ""
"Every code has a convenient tool for setting up the required input, called "
"the *builder*. It can be obtained by using the ``get_builder`` method:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:324
msgid ""
"Using the builder, you can easily set up the calculation by directly "
"providing the input arguments. Let's use the ``Int`` node that was created "
"by our previous ``calcfunction`` as one of the inputs and a new node as the "
"second input:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:332
msgid ""
"In case that your nodes' PKs are different and you don't remember the PK of "
"the output node from the previous calculation, check the provenance graph "
"you generated earlier and use the UUID of the output node instead:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:339
msgid ""
"Note that you don't have to provide the entire UUID to load the node. As "
"long as the first part of the UUID is unique within your database, AiiDA "
"will find the node you are looking for."
msgstr ""

#: ../docs/source/intro/tutorial.rst:344
msgid ""
"One nifty feature of the builder is the ability to use tab completion for "
"the inputs. Try it out by typing ``builder.`` + ``<TAB>`` in the verdi "
"shell."
msgstr ""

#: ../docs/source/intro/tutorial.rst:347
msgid ""
"To execute the ``CalcJob``, we use the ``run`` function provided by the "
"AiiDA engine:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:354
msgid ""
"Wait for the process to complete. Once it is done, it will return a "
"dictionary with the output nodes:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:364
msgid ""
"Besides the sum of the two ``Int`` nodes, the calculation function also "
"returns two other outputs: one of type ``RemoteData`` and one of type "
"``FolderData``. See the :ref:`topics section on calculation jobs "
"<topics:calculations:usage:calcfunctions>` for more details. Now, exit the "
"IPython shell and once more check for *all* processes:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:372
msgid ""
"You should now see two processes in the list. One is the ``multiply`` "
"calcfunction you ran earlier, the second is the ``ArithmeticAddCalculation``"
" CalcJob that you have just run. Grab the PK of the "
"``ArithmeticAddCalculation``, and generate the provenance graph. The result "
"should look like the graph shown in :numref:`fig_calcjob_graph`."
msgstr ""

#: ../docs/source/intro/tutorial.rst:386
msgid ""
"Provenance graph of the ``ArithmeticAddCalculation`` CalcJob, with one input"
" provided by the output of the ``multiply`` calculation function."
msgstr ""

#: ../docs/source/intro/tutorial.rst:388
msgid ""
"You can see more details on any process, including its inputs and outputs, "
"using the verdi shell:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:395
msgid "Submitting to the daemon"
msgstr ""

#: ../docs/source/intro/tutorial.rst:397
msgid ""
"When we used the ``run`` command in the previous section, the IPython shell "
"was blocked while it was waiting for the ``CalcJob`` to finish. This is not "
"a problem when we're simply adding two number together, but if we want to "
"run multiple calculations that take hours or days, this is no longer "
"practical. Instead, we are going to *submit* the ``CalcJob`` to the AiiDA "
"*daemon*. The daemon is a program that runs in the background and manages "
"submitted calculations until they are *terminated*. Let's first check the "
"status of the daemon using the ``verdi`` CLI:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:407
msgid ""
"If the daemon is running, the output will be something like the following:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:419
msgid "In this case, let's stop it for now:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:425
msgid ""
"Next, let's *submit* the ``CalcJob`` we ran previously. Start the ``verdi "
"shell`` and execute the Python code snippet below. This follows all the "
"steps we did previously, but now uses the ``submit`` function instead of "
"``run``:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:440
msgid ""
"When using ``submit`` the calculation job is not run in the local "
"interpreter but is sent off to the daemon and you get back control "
"instantly. Instead of the *result* of the calculation, it returns the node "
"of the ``CalcJob`` that was just submitted:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:447
msgid "Let's exit the IPython shell and have a look at the process list:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:453
msgid ""
"You should see the ``CalcJob`` you have just submitted, with the state "
"``Created``:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:465
msgid ""
"The ``CalcJob`` process is now waiting to be picked up by a daemon runner, "
"but the daemon is currently disabled. Let's start it up (again):"
msgstr ""

#: ../docs/source/intro/tutorial.rst:472
msgid ""
"Now you can either use ``verdi process list`` to follow the execution of the"
" ``CalcJob``, or ``watch`` its progress:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:478
msgid ""
"Let's wait for the ``CalcJob`` to complete and then use ``verdi process list"
" -a`` to see all processes we have run so far:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:493
msgid "Workflows"
msgstr ""

#: ../docs/source/intro/tutorial.rst:495
msgid ""
"So far we have executed each process manually. AiiDA allows us to automate "
"these steps by linking them together in a *workflow*, whose provenance is "
"stored to ensure reproducibility. For this tutorial we have prepared a basic"
" ``WorkChain`` that is already implemented in ``aiida-core``. You can see "
"the code below:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:506
msgid ""
"First, we recognize the ``multiply`` function we have used earlier, "
"decorated as a ``calcfunction``. The ``define`` class method specifies the "
"``input`` and ``output`` of the ``WorkChain``, as well as the ``outline``, "
"which are the steps of the workflow. These steps are provided as methods of "
"the ``MultiplyAddWorkChain`` class."
msgstr ""

#: ../docs/source/intro/tutorial.rst:512
msgid ""
"Besides WorkChain's, workflows can also be implemented as *work functions*. "
"These are ideal for workflows that are not very computationally intensive "
"and can be easily implemented in a Python function."
msgstr ""

#: ../docs/source/intro/tutorial.rst:515
msgid ""
"Let's run the ``WorkChain`` above! Start up the ``verdi shell`` and load the"
" ``MultiplyAddWorkChain`` using the ``WorkflowFactory``:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:522
msgid ""
"The ``WorkflowFactory`` is a useful and robust tool for loading workflows "
"based on their *entry point*, e.g. ``'arithmetic.multiply_add'`` in this "
"case. Similar to a ``CalcJob``, the ``WorkChain`` input can be set up using "
"a builder:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:533
msgid ""
"Once the ``WorkChain`` input has been set up, we submit it to the daemon "
"using the ``submit`` function from the AiiDA engine:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:540
msgid "Now quickly leave the IPython shell and check the process list:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:546
msgid ""
"Depending on which step the workflow is running, you should get something "
"like the following:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:563
msgid ""
"We can see that the ``MultiplyAddWorkChain`` is currently waiting for its "
"*child process*, the ``ArithmeticAddCalculation``, to finish. Check the "
"process list again for *all* processes (You should know how by now!). After "
"about half a minute, all the processes should be in the ``Finished`` state."
msgstr ""

#: ../docs/source/intro/tutorial.rst:567
msgid ""
"We can now generate the full provenance graph for the ``WorkChain`` with:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:573
msgid ""
"Look familiar? The provenance graph should be similar to the one we showed "
"at the start of this tutorial (:numref:`fig_workchain_graph`)."
msgstr ""

#: ../docs/source/intro/tutorial.rst:581
msgid "Final provenance Graph of the basic AiiDA tutorial."
msgstr ""

#: ../docs/source/intro/tutorial.rst:587
msgid "Next Steps"
msgstr ""

#: ../docs/source/intro/tutorial.rst:589
msgid ""
"Congratulations! You have completed the first step to becoming an AiiDA "
"expert."
msgstr ""

#: ../docs/source/intro/tutorial.rst:591
msgid ""
"We have also compiled useful how-to guides that are especially relevant for "
"the following use cases:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:599
msgid "Designing a workflow"
msgstr ""

#: ../docs/source/intro/tutorial.rst:599
msgid ""
"After reading the :ref:`Basic Tutorial <tutorial:basic>`, you may want to "
"learn about how to encode the logic of a typical scientific workflow in the "
":ref:`multi-step workflows how-to <how-to:workflows>`."
msgstr ""

#: ../docs/source/intro/tutorial.rst:602
msgid "Reusable data types"
msgstr ""

#: ../docs/source/intro/tutorial.rst:602
msgid ""
"If you have a certain input or output data type, which you use often, then "
"you may wish to turn it into its own :ref:`data plugin <how-"
"to:data:plugin>`."
msgstr ""

#: ../docs/source/intro/tutorial.rst:605 ../docs/source/intro/tutorial.rst:637
msgid "Exploring your data"
msgstr ""

#: ../docs/source/intro/tutorial.rst:605 ../docs/source/intro/tutorial.rst:637
msgid ""
"Once you have run multiple computations, the :ref:`find and query data how-"
"to <how-to:data:find>` can show you how to efficiently explore your data. "
"The data lineage can also be visualised as a :ref:`provenance graph <how-"
"to:data:visualise-provenance>`."
msgstr ""

#: ../docs/source/intro/tutorial.rst:608 ../docs/source/intro/tutorial.rst:640
msgid "Sharing your data"
msgstr ""

#: ../docs/source/intro/tutorial.rst:608 ../docs/source/intro/tutorial.rst:640
msgid ""
"You can export all or part of your data to file with the :ref:`export/import"
" functionality<how-to:data:share>` or you can even serve your data over "
"HTTP(S) using the :ref:`AiiDA REST API <how-to:data:serve>`."
msgstr ""

#: ../docs/source/intro/tutorial.rst:610
msgid "Sharing your workflows"
msgstr ""

#: ../docs/source/intro/tutorial.rst:611
msgid ""
"Once you have a working computation workflow, you may also wish to "
":ref:`package it into a python module <how-to:plugins>` for others to use."
msgstr ""

#: ../docs/source/intro/tutorial.rst:618 ../docs/source/intro/tutorial.rst:634
msgid "Working with external codes"
msgstr ""

#: ../docs/source/intro/tutorial.rst:617 ../docs/source/intro/tutorial.rst:633
msgid ""
"Existing calculation plugins, for interfacing with external codes, are "
"available on the `aiida plugin registry <https://aiidateam.github.io/aiida-"
"registry/>`_. If none meet your needs, then the :ref:`external codes how-to "
"<how-to:codes>` can show you how to create your own calculation plugin."
msgstr ""

#: ../docs/source/intro/tutorial.rst:621
msgid "Tuning performance"
msgstr ""

#: ../docs/source/intro/tutorial.rst:621
msgid ""
"To optimise the performance of AiiDA for running many concurrent "
"computations see the :ref:`tuning performance how-to <how-"
"to:installation:performance>`."
msgstr ""

#: ../docs/source/intro/tutorial.rst:623
msgid "Saving computational resources"
msgstr ""

#: ../docs/source/intro/tutorial.rst:624
msgid ""
"AiiDA can cache and reuse the outputs of identical computations, as "
"described in the :ref:`caching how-to <how-to:codes:caching>`."
msgstr ""

#: ../docs/source/intro/tutorial.rst:630
msgid "Connecting to supercomputers"
msgstr ""

#: ../docs/source/intro/tutorial.rst:629
msgid ""
"To setup up a computer which can communicate with a HPC over SSH, see the "
":ref:`running on supercomputers how-to <how-to:installation:running-on-"
"supercomputers>`, or add a :ref:`custom transport <how-to:codes:transport>`."
" AiiDA has pre-written scheduler plugins to work with LSF, PBSPro, SGE, "
"Slurm and Torque."
msgstr ""

#: ../docs/source/intro/tutorial.rst:642
msgid "Sharing your calculation plugin"
msgstr ""

#: ../docs/source/intro/tutorial.rst:643
msgid ""
"Once you have a working plugin, you may also wish to :ref:`package it into a"
" python module <how-to:plugins>` for others to use."
msgstr ""

#: ../docs/source/intro/tutorial.rst:647
msgid "Todo"
msgstr ""

#: ../docs/source/intro/tutorial.rst:649
msgid ""
"Add to \"Connecting to supercomputers\": , or you can add a :ref:`custom "
"scheduler <how-to:codes:scheduler>`."
msgstr ""
