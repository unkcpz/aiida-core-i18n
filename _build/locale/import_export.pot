# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, ECOLE POLYTECHNIQUE FEDERALE DE LAUSANNE (Theory and Simulation of Materials (THEOS) and National Centre for Computational Design and Discovery of Novel Materials (NCCR MARVEL)), Switzerland and ROBERT BOSCH LLC, USA. All rights reserved
# This file is distributed under the same license as the AiiDA package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: AiiDA 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-15 14:09+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/import_export/dbimporters/cod.rst:2
msgid "COD database importer"
msgstr ""

#: ../../source/import_export/dbimporters/cod.rst:4
msgid "COD database importer is used to import crystal structures from the `Crystallography Open Database`_ (COD) to AiiDA."
msgstr ""

#: ../../source/import_export/dbimporters/cod.rst:8
#: ../../source/import_export/dbimporters/icsd.rst:20
msgid "Setup"
msgstr ""

#: ../../source/import_export/dbimporters/cod.rst:10
msgid "An instance of :py:class:`CodDbImporter <aiida.tools.dbimporters.plugins.cod.CodDbImporter>` is created as follows::"
msgstr ""

#: ../../source/import_export/dbimporters/cod.rst:17
msgid "No additional parameters are required for standard queries on the main COD server."
msgstr ""

#: ../../source/import_export/dbimporters/cod.rst:21
#: ../../source/import_export/dbimporters/icsd.rst:70
msgid "How to do a query"
msgstr ""

#: ../../source/import_export/dbimporters/cod.rst:23
msgid "A search is initiated by supplying query statements using ``keyword=value`` syntax::"
msgstr ""

#: ../../source/import_export/dbimporters/cod.rst:28
msgid "List of possible keywords can be listed using::"
msgstr ""

#: ../../source/import_export/dbimporters/cod.rst:32
msgid "Values for the most of the keywords can be list. In that case the query will return entries, that match any of the values (binary `OR`) from the list. Moreover, in the case of multiple keywords, entries, that match all the conditions imposed by the keywords, will be returned (binary `AND`)."
msgstr ""

#: ../../source/import_export/dbimporters/cod.rst:37
msgid "Example::"
msgstr ""

#: ../../source/import_export/dbimporters/cod.rst:42
msgid "is equivalent to the following SQL statement::"
msgstr ""

#: ../../source/import_export/dbimporters/cod.rst:48
msgid "A query returns an instance of :py:class:`CodSearchResults <aiida.tools.dbimporters.plugins.cod.CodSearchResults>`, which can be used in a same way as a list of :py:class:`CodEntry <aiida.tools.dbimporters.plugins.cod.CodEntry>` instances::"
msgstr ""

#: ../../source/import_export/dbimporters/cod.rst:59
msgid "Using data from :py:class:`CodEntry <aiida.tools.dbimporters.plugins.cod.CodEntry>`"
msgstr ""

#: ../../source/import_export/dbimporters/cod.rst:61
msgid ":py:class:`CodEntry <aiida.tools.dbimporters.plugins.cod.CodEntry>` has a few functions to access the contents of it's instances::"
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:5
msgid "ICSD database importer"
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:8
msgid "In this section we explain how to import CIF files from the ICSD database using the :py:class:`IcsdDbImporter <aiida.tools.dbimporters.plugins.icsd.IcsdDbImporter>` class."
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:13
msgid "Before being able to query ICSD, provided by FIZ Karlsruhe, you should have the intranet database installed on a server (http://www.fiz-karlsruhe.de/icsd_intranet.html). Follow the installation as decsribed in the manual."
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:15
msgid "It is necessary to know the webpage of the icsd web interface and have access to the full database from the local machine."
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:17
msgid "You can either query the mysql database or the web page, the latter is restricted to a maximum of 1000 search results, which makes it unsuitable for data mining. So better set up the mysql connection."
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:22
msgid "An instance of the :py:class:`IcsdDbImporter <aiida.tools.dbimporters.plugins.icsd.IcsdDbImporter>` can be created as follows::"
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:26
msgid "Here is a list of the most important input parameters with an explanation."
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:29
msgid "For both connection types (web and SQL):"
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:31
msgid "**server**: address of web interface of the icsd database; it should contain both the protocol and the domain name and end with a slash; example::"
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:37
msgid "The following parameters are required only for the mysql query:"
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:39
msgid "**host**: database host name address."
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:41
msgid "If the database is not hosted on your local machine, it can be useful to create an ssh tunnel to the 3306 port of the database host::"
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:46
#: ../../source/import_export/dbimporters/icsd.rst:141
msgid "If you get an URLError with Errno 111 (Connection refused) when you query the database, try to use instead::"
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:51
msgid "The database can then be accessed using \"127.0.0.1\" as host::"
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:59
msgid "**user / pass_wd / db / port**: Login username, password, name of database and port of your mysql database."
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:56
msgid "If the standard installation of ICSD intranet version has been followed, the default values should work. Otherwise contact your system administrator to get the required information::"
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:61
msgid "Other settings:"
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:63
msgid "**querydb**: If True (default) the mysql database is queried, otherwise the web page is queried."
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:65
msgid "A more detailed documentation and additional settings are found under :py:class:`IcsdDbImporter <aiida.tools.dbimporters.plugins.icsd.IcsdDbImporter>`."
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:72
msgid "If the setup worked, you can do your first query::"
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:78
msgid "All supported keywords can be obtained using::"
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:82
msgid "More information on the keywords are found under http://www.fiz-karlsruhe.de/fileadmin/be_user/ICSD/PDF/sci_man_ICSD_v1.pdf"
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:85
msgid "A query returns an instance of :py:class:`IcsdSearchResults <aiida.tools.dbimporters.plugins.icsd.IcsdSearchResults>`"
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:87
msgid "The :py:class:`IcsdEntry <aiida.tools.dbimporters.plugins.icsd.IcsdEntry>` at position ``i`` can be accessed using::"
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:91
msgid "You can also iterate through all query results::"
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:96
msgid "Instances of :py:class:`IcsdEntry <aiida.tools.dbimporters.plugins.icsd.IcsdEntry>` have following methods:"
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:98
msgid "**get_cif_node()**: Return an instance of :py:class:`CifData <aiida.orm.nodes.data.cif.CifData>`, which can be used in an AiiDA workflow."
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:100
msgid "**get_aiida_structure()**: Return an AiiDA structure"
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:102
msgid "**get_ase_structure()**: Return an ASE structure"
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:104
msgid "The most convenient format can be chosen for further processing."
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:108
msgid "Full example"
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:110
msgid "Here is a full example how the icsd importer can be used::"
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:132
msgid "Troubleshooting: Testing the mysql connection"
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:134
msgid "To test your mysql connection, first make sure that you can connect to the 3306 port of the machine hosting the database. If the database is not hosted by your local machine, use the local port tunneling provided by ssh, as follows::"
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:147
msgid "You need an account on the host machine."
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:148
msgid "There are plenty of explanations online explaining how to setup an tunnel over a SSH connection using the ``-L`` option, just google for it in case you need more information."
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:152
msgid "Then open a new ``verdi shell`` and type::"
msgstr ""

#: ../../source/import_export/dbimporters/icsd.rst:158
msgid "If you do not get an error and it does not hang, you have successfully established your connection to the mysql database."
msgstr ""

#: ../../source/import_export/external_dbs.rst:3
msgid "Structures and external databases"
msgstr ""

#: ../../source/import_export/external_dbs.rst:5
msgid "AiiDA support the automatic import and export of atomic structures from and to selected external databases."
msgstr ""

#: ../../source/import_export/external_dbs.rst:8
#: ../../source/import_export/main.rst:28
msgid "Import"
msgstr ""

#: ../../source/import_export/external_dbs.rst:10
msgid "The base class that defines the API for the importers can be found here: :py:class:`~aiida.tools.dbimporters.baseclasses.DbImporter`."
msgstr ""

#: ../../source/import_export/external_dbs.rst:13
msgid "Below is a list of available plugins:"
msgstr ""

#: ../../source/import_export/index.rst:3
msgid "Import and Export"
msgstr ""

#: ../../source/import_export/main.rst:3
msgid "AiiDA graphs"
msgstr ""

#: ../../source/import_export/main.rst:5
msgid "AiiDA offers tools for exporting selected parts of an AiiDA graph to a file for backup or sharing purposes."
msgstr ""

#: ../../source/import_export/main.rst:9
msgid "Export"
msgstr ""

#: ../../source/import_export/main.rst:11
msgid "Use ``verdi export create`` to export a selection of nodes, users or computers."
msgstr ""

#: ../../source/import_export/main.rst:13
msgid "**Selection:** Nodes can be selected via PK, or by exporting predefined groups of nodes."
msgstr ""

#: ../../source/import_export/main.rst:15
msgid "**Augmentation:** By default, the export function augments a selection of nodes by their parents in order to preserve the provenance.  For calculation nodes, the direct outputs are also added."
msgstr ""

#: ../../source/import_export/main.rst:18
msgid "**File content:** The export file contains all information pertaining to the exported nodes: both the information stored in the database and files stored in the aiida repository."
msgstr ""

#: ../../source/import_export/main.rst:21
msgid "**Compression:**   By default, the export file is compressed using zip. Other options are available."
msgstr ""

#: ../../source/import_export/main.rst:24
msgid "See ``verdi export create -h`` for a full list of available options."
msgstr ""

#: ../../source/import_export/main.rst:29
msgid "Use ``verdi import`` to import an AiiDA export file generated by ``verdi export``."
msgstr ""

#: ../../source/import_export/main.rst:31
msgid "**Duplication:** AiiDA will avoid identifier collisions and node duplication."
msgstr ""

#: ../../source/import_export/main.rst:33
msgid "See ``verdi import -h`` for a full list of available options."
msgstr ""

#: ../../source/import_export/main.rst:38
msgid "Export File format"
msgstr ""

#: ../../source/import_export/main.rst:39
msgid "An AiiDA export file is an archive of ``.zip`` or ``.tar.gz`` format with the following content:"
msgstr ""

#: ../../source/import_export/main.rst:42
msgid "``metadata.json`` file containing information on the version of AiiDA as well as the database schema."
msgstr ""

#: ../../source/import_export/main.rst:43
msgid "``data.json`` file containing the exported nodes and their links."
msgstr ""

#: ../../source/import_export/main.rst:44
msgid "``nodes/`` directory containing the repository files corresponding to the exported nodes."
msgstr ""

#: ../../source/import_export/main.rst:49
msgid "metadata.json"
msgstr ""

#: ../../source/import_export/main.rst:50
msgid "This file contains important information and it is necessary for the correct interpretation of the *data.json*. Apart from the data schema, the AiiDA code and the export file version are also mentioned. This is used to avoid any incompatibilities among different versions of AiiDA. It should be noted that the schema described in metadata.json is related to the data itself - abstracted schema focused on the extracted information -  and not how the data is stored in the database (database schema). This makes the import/export mechanism to be transparent to the database system used, backend selected and how the data is organised in the database (database schema)."
msgstr ""

#: ../../source/import_export/main.rst:60
msgid "Let's have a look at the contents of the metadata.json::"
msgstr ""

#: ../../source/import_export/main.rst:190
msgid "At the beginning of the file, we see the version of the export file and the versions of the AiiDA code."
msgstr ""

#: ../../source/import_export/main.rst:193
msgid "The entities that are exported are mentioned in the sequel with their unique identifiers. Knowing the unique IDs is useful for duplicate avoidance (in order to avoid the insertion of the node multiple times)."
msgstr ""

#: ../../source/import_export/main.rst:197
msgid "Then in the *all_fields_info*, the properties of each entity are mentioned. It is also mentioned the correlations with other entities. For example, the entity *Node* is related to a computer and a user. The corresponding entity names appear nested next to the properties to show this correlation."
msgstr ""

#: ../../source/import_export/main.rst:205
msgid "data.json"
msgstr ""

#: ../../source/import_export/main.rst:206
msgid "A sample of the *data.json* file follows::"
msgstr ""

#: ../../source/import_export/main.rst:381
msgid "At the start of the json file the links among the various AiiDA nodes are stated (*links_uuid* field). For every link the UUID (Universal unique identifiers) of the connected nodes but also the name of the link is mentioned."
msgstr ""

#: ../../source/import_export/main.rst:385
msgid "Then the export data follows where for every entity the data appear. It is worth observing the references between the instances of the various entities. For example the DbNode with identifier *5921143* belongs to the user with identifier 2 and was generated by the computer with identifier 1."
msgstr ""

#: ../../source/import_export/main.rst:390
msgid "The name of the entities is, for the moment, a reference to the model class of the Django backend. This stands for both backends (Django and SQLAlchemy) ensuring that the export files are cross-backend compatible. These names will change in the future to more abstract names."
msgstr ""

#: ../../source/import_export/main.rst:395
msgid "If any groups are extracted, then they are mentioned in corresponding field (*groups_uuid*)."
msgstr ""

#: ../../source/import_export/main.rst:398
msgid "Attributes of the extracted nodes, are described in the ending part of the json file. The identifier of the corresponding node is used as a key for the attribute. The field *node_attributes_conversion* contains information regarding the type of the attribute. For example the dates are not inherently supported by JSON, so it is specified explicitly in the schema if the value of an attribute is of that specific type. After the *node_attributes_conversion* the *node_attributes* section follows with the actual values."
msgstr ""

