# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, ECOLE POLYTECHNIQUE FEDERALE DE LAUSANNE (Theory and Simulation of Materials (THEOS) and National Centre for Computational Design and Discovery of Novel Materials (NCCR MARVEL)), Switzerland and ROBERT BOSCH LLC, USA. All rights reserved
# This file is distributed under the same license as the AiiDA package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: AiiDA 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-15 13:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/querying/querybuilder/queryhelp.rst:4
msgid "The queryhelp"
msgstr ""

#: ../../source/querying/querybuilder/queryhelp.rst:6
msgid "As mentioned above, there are two possibilities to tell the QueryBuilder what to do. The second uses one big dictionary that we can call the queryhelp in the following. It has the same functionalities as the appender method. But you could save this dictionary in a JSON or in the database and use it over and over. Using the queryhelp, you have to specify the path, the filter and projections beforehand and instantiate the QueryBuilder with that dictionary::"
msgstr ""

#: ../../source/querying/querybuilder/queryhelp.rst:15
msgid "What do you have to specify:"
msgstr ""

#: ../../source/querying/querybuilder/queryhelp.rst:17
msgid "Specifying the path: Here, the user specifies the path along which to join tables as a list, each list item being a vertice in your path. You can define the vertice in two ways: The first is to give the Aiida-class::"
msgstr ""

#: ../../source/querying/querybuilder/queryhelp.rst:35
msgid "Another way is to give the polymorphic identity of this class, in our case stored in type::"
msgstr ""

#: ../../source/querying/querybuilder/queryhelp.rst:44
msgid "In Aiida, polymorphism is not strictly enforced, but done with *type* specification. Type-discrimination when querying is achieved by attaching a filter on the type every time a subclass of Node is given."
msgstr ""

#: ../../source/querying/querybuilder/queryhelp.rst:49
msgid "Each node has to have a unique tag. If not given, the tag is chosen to be equal to the name of the class. This will not work if the user chooses the same class twice. In this case he has to provide the tag::"
msgstr ""

#: ../../source/querying/querybuilder/queryhelp.rst:67
msgid "There also has to be some information on the edges, in order to join correctly. There are several redundant ways this can be done:"
msgstr ""

#: ../../source/querying/querybuilder/queryhelp.rst:71
msgid "You can specify that this node is an input or output of another node preceding the current one in the list. That other node can be specified by an integer or the class or type. The following examples are all valid joining instructions, assuming there is a structure defined at index 2 of the path with tag \"struc1\"::"
msgstr ""

#: ../../source/querying/querybuilder/queryhelp.rst:87
msgid "queryhelp_item['direction'] = integer"
msgstr ""

#: ../../source/querying/querybuilder/queryhelp.rst:89
msgid "If any of the above specs (\"with_outgoing\", \"with_incoming\") were not specified, the key \"direction\" is looked for. Directions are defined as distances in the tree. 1 is defined as one step down the tree along a link. This means that 1 joins the node specified in this dictionary to the node specified on list-item before **as an output**. Direction defaults to 1, which is why, if nothing is specified, this node is joined to the previous one as an output by default. A minus sign reverse the direction of the link. The absolute value of the direction defines the table to join to with respect to your own position in the list. An absolute value of 1 joins one table above, a value of 2 to the table defined 2 indices above. The two following queryhelps yield the same  query::"
msgstr ""

#: ../../source/querying/querybuilder/queryhelp.rst:146
msgid "Project: Determing which columns the query will return::"
msgstr ""

#: ../../source/querying/querybuilder/queryhelp.rst:155
msgid "If you are using JSONB columns, you can also project a value stored inside the json::"
msgstr ""

#: ../../source/querying/querybuilder/queryhelp.rst:168
msgid "Returns the state and the id of all instances of Relax where a structures is linked as output of a relax-calculation. The strings that you pass have to be name of the columns. If you pass a star ('*'), the query will return the instance of the AiidaClass."
msgstr ""

#: ../../source/querying/querybuilder/queryhelp.rst:174
msgid "Filters: What if you want not every structure, but only the ones that were added after a certain time `t` and have an id higher than 50::"
msgstr ""

#: ../../source/querying/querybuilder/queryhelp.rst:309
msgid "If you want to include filters and projections on links between nodes, you will have to add these to filters and projections in the queryhelp. Let's take an example that we had and add a few filters on the link::"
msgstr ""

#: ../../source/querying/querybuilder/queryhelp.rst:335
msgid "Notice that the tag for the link, by default, is the tag of the two connecting nodes delimited by two dashes '--'. The order does not matter, the following queryhelp would results in the same query::"
msgstr ""

#: ../../source/querying/querybuilder/queryhelp.rst:361
msgid "If you dislike that way to tag the link, you can choose the tag for the edge in the path when definining the entity to join using ``edge_tag``::"
msgstr ""

#: ../../source/querying/querybuilder/queryhelp.rst:391
msgid "You can set a limit and an offset in the queryhelp::"
msgstr ""

#: ../../source/querying/querybuilder/queryhelp.rst:399
msgid "That queryhelp would tell the QueryBuilder to return 10 rows after the first 20 have been skipped."
msgstr ""

