# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, ECOLE POLYTECHNIQUE FEDERALE DE LAUSANNE (Theory and Simulation of Materials (THEOS) and National Centre for Computational Design and Discovery of Novel Materials (NCCR MARVEL)), Switzerland and ROBERT BOSCH LLC, USA. All rights reserved
# This file is distributed under the same license as the AiiDA package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: AiiDA 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-15 13:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/datatypes/functionality.rst:4
msgid "Export data nodes to various formats"
msgstr ""

#: ../../source/datatypes/functionality.rst:5
msgid "Each data node has a :py:meth:`~aiida.orm.nodes.data.data.Data.export()` method that allows to export the given data node to file in a variety of available formats, e.g. to pass it to a visualization software."
msgstr ""

#: ../../source/datatypes/functionality.rst:9
msgid "The :py:meth:`~aiida.orm.nodes.data.data.Data.export()` method asks for a filename, and it will write to file the result. It is possible that more than one file is written (example: if you produce a gnuplot script, the data will typically be in a different .dat file). The return value of the function is a list of files that have been created."
msgstr ""

#: ../../source/datatypes/functionality.rst:14
msgid "The list of export formats depends on the specific Data plugin. The export format is typically inferred from the file extension, but if this is not possible (or you want to specify a given format), you can pass an additional ``fileformat`` parameter to :py:meth:`~aiida.orm.nodes.data.data.Data.export()`. The list of all valid export formats can be obtained calling ``Data.get_export_formats()`` method, that returns a list of strings with all valid formats."
msgstr ""

#: ../../source/datatypes/functionality.rst:22
msgid "If you don't want to export directly to a file, but want to get simply the content of the file as a string, then you can call the :py:meth:`~aiida.orm.nodes.data.data.Data._exportcontent()` method, passing also a ``fileformat`` parameter. The return value is a tuple of length 2: the first element is a string with the content of the \"main\" file, while the second is a dictionary (possibly empty) with a list of additional files that should be created/needed: the keys are filenames, and the values are the files content."
msgstr ""

#: ../../source/datatypes/functionality.rst:31
msgid "Exporting from the command line"
msgstr ""

#: ../../source/datatypes/functionality.rst:32
msgid "Most data types expose the export functionality on the command line."
msgstr ""

#: ../../source/datatypes/functionality.rst:34
msgid "For instance, if you want to export a StructureData object with given ``PK``, you can run on the command line::"
msgstr ""

#: ../../source/datatypes/functionality.rst:39
msgid "that will export the node with PK=``PK`` in the format ``FORMAT_NAME``. This will print on screen the file content; a few command line options allow to change this behaviour:"
msgstr ""

#: ../../source/datatypes/functionality.rst:43
msgid "``-o FILENAME`` asks to write directly on a file named ``FILENAME``. This is compulsory in some cases, e.g. if more than one file needs to be created."
msgstr ""

#: ../../source/datatypes/functionality.rst:45
msgid "``-y`` asks to overwrite the file(s), if present. If not specified, the call will fail if any of the files to create are present."
msgstr ""

#: ../../source/datatypes/functionality.rst:48
msgid "Additional options (often format-specific) exist, and can be discovered passing the ``-h`` option to the command line. For instance:"
msgstr ""

#: ../../source/datatypes/functionality.rst:51
msgid "``verdi data structure export`` accepts a number of formats including ``xsf``, ``cif``, ``xyz`` and ``tcod``, and additional parameters like ``--no-reduce-symmetry`` (to be used in combination with the ``tcod`` format to tell AiiDA not to try to reduce simmetry in the output CIF file, etc."
msgstr ""

#: ../../source/datatypes/functionality.rst:55
msgid "``verdi data trajectory export`` accepts a number of formats including ``xsf``, ``cif`` and ``tcod``, and additional parameters like ``--step NUM`` (to choose to export only a given trajectory step)."
msgstr ""

#: ../../source/datatypes/functionality.rst:59
msgid "``verdi data bands export`` accepts a number of formats including (see also below) and additional parameters like ``--prettify-format FORMATNAME``, see valid formats below, or ``--y-min-lim``, ``--y-max-lim`` to specify the ``y``-axis limits."
msgstr ""

#: ../../source/datatypes/functionality.rst:66
msgid "Export formats for specific Data types"
msgstr ""

#: ../../source/datatypes/functionality.rst:67
msgid "As the formats are specific to the data types, here is a list of some of the export formats available for some of the AiiDA data classes."
msgstr ""

#: ../../source/datatypes/functionality.rst:71
msgid "StructureData"
msgstr ""

#: ../../source/datatypes/functionality.rst:72
#: ../../source/datatypes/functionality.rst:86
#: ../../source/datatypes/functionality.rst:98
msgid "The following export formats are available:"
msgstr ""

#: ../../source/datatypes/functionality.rst:74
#: ../../source/datatypes/functionality.rst:88
msgid "``xsf`` (format supported by e.g. XCrySDen and other visualization software; supports periodic cells)"
msgstr ""

#: ../../source/datatypes/functionality.rst:76
msgid "``xyz`` (classical xyz format, does not typically support periodic cells (even if the cell is indicated in the comment line)"
msgstr ""

#: ../../source/datatypes/functionality.rst:78
msgid "``cif`` (export to CIF format, without symmetry reduction, i.e. always storing the structure as P1 symmetry)"
msgstr ""

#: ../../source/datatypes/functionality.rst:80
msgid "``tcod`` (extension to the CIF format, supports symmetry reduction, and typically adds in the CIF file a number of additional information, including the full provenance of the crystal structure node)"
msgstr ""

#: ../../source/datatypes/functionality.rst:85
msgid "TrajectoryData"
msgstr ""

#: ../../source/datatypes/functionality.rst:90
msgid "``cif`` (export to CIF format, without symmetry reduction, i.e. always storing the structures as P1 symmetry)"
msgstr ""

#: ../../source/datatypes/functionality.rst:92
msgid "``tcod`` (extension to the CIF format, supports symmetry reduction, and typically adds in the CIF file a number of additional information, including the full provenance of the crystal trajecotry node)"
msgstr ""

#: ../../source/datatypes/functionality.rst:97
msgid "BandsData"
msgstr ""

#: ../../source/datatypes/functionality.rst:100
msgid "``agr``: export a Xmgrace .agr file with the band plot"
msgstr ""

#: ../../source/datatypes/functionality.rst:101
msgid "``agr_batch``: export a Xmgrace batch file together with an independent .dat file"
msgstr ""

#: ../../source/datatypes/functionality.rst:102
msgid "``dat_blocks``: export a .dat file, where each line has a data point (xy) and bands are separated in blocks with empty lines"
msgstr ""

#: ../../source/datatypes/functionality.rst:104
msgid "``dat_multicolumn``: export a .dat file, where each line has all the values for a given x coordinate: ``x y1 y2 y3 y4 ...`` (``x`` being a linear coordinate along the band path and ``yN`` being the band energies)"
msgstr ""

#: ../../source/datatypes/functionality.rst:107
msgid "``gnuplot``: export a gnuplot file, together with a .dat file"
msgstr ""

#: ../../source/datatypes/functionality.rst:108
msgid "``json``: export a json file with the bands divided into segments"
msgstr ""

#: ../../source/datatypes/functionality.rst:109
msgid "``mpl_singlefile``: export a python file that when executed shows a plot using the ``matplotlib`` module. All data is included in the same python file as a multiline string containing the data in json format."
msgstr ""

#: ../../source/datatypes/functionality.rst:112
msgid "``mpl_withjson``: As above, but the json data is stored separately in a different file"
msgstr ""

#: ../../source/datatypes/functionality.rst:113
msgid "``mpl_pdf``: As above, but after creating the .py file it runs it to export the band structure in a PDF file (vectorial). **NOTE**: it requires that you have the python ``matplotlib`` module installed. If ``use_latex`` is true, it requires that you have LaTeX installed on your system to typeset the labels, as well as the ``dvipng`` binary."
msgstr ""

#: ../../source/datatypes/functionality.rst:117
msgid "``mpl_png``: As above, but after creating the .py file it runs it to export the band structure in a PDF file (vectorial). **NOTE**: this format has the same dependencies as the ``mpl_pdf`` format above."
msgstr ""

#: ../../source/datatypes/functionality.rst:122
msgid "Label prettifiers"
msgstr ""

#: ../../source/datatypes/functionality.rst:123
msgid "AiiDA provides a number of functions to \"prettify\" the labels of band structures (if labels are present in the data node), i.e., replace ``GAMMA`` with :math:`\\Gamma` or ``K_1`` with :math:`K_{1}` for instance. This makes sense for some output formats (e.g. Xmgrace, Gnuplot, matplotlib)."
msgstr ""

#: ../../source/datatypes/functionality.rst:129
msgid "The prettifier functions are defined as methods of the :py:class:`~aiida.common.utils.Prettifier` class. and can be obtained calling :py:meth:`Prettifier.get_prettifiers()<aiida.common.utils.Prettifier.get_prettifiers>`."
msgstr ""

#: ../../source/datatypes/functionality.rst:134
msgid "The prettifiers should be chosen depending on two aspects:"
msgstr ""

#: ../../source/datatypes/functionality.rst:136
msgid "how the raw labels are stored in the database. Two types exist currently: ``seekpath``, as used in the ``seekpath`` module, where Greek letters are written explicitly (e.g. ``GAMMA``) and underscores are used to indicate a subscript (``K_1``); and the \"old\" ``simple`` format, where :math:`\\Gamma` is indicated with ``G`` and there is no underscore symbol)."
msgstr ""

#: ../../source/datatypes/functionality.rst:142
msgid "depending on the output format: xmgrace has a specific syntax for Greek letters and subscripts, matplotlib uses LaTeX syntax, etc."
msgstr ""

#: ../../source/datatypes/functionality.rst:145
msgid "Most export formats already decide which prettifier is best to use, but if you need to change it, you can do it passing the ``prettify_format`` parameter to the :py:meth:`~aiida.orm.nodes.data.data.Data.export()` method. Valid prettifiers include:"
msgstr ""

#: ../../source/datatypes/functionality.rst:149
msgid "``'agr_seekpath``: format for Xmgrace, using ``seekpath`` raw label syntax"
msgstr ""

#: ../../source/datatypes/functionality.rst:150
msgid "``agr_simple``: format for Xmgrace, using ``simple`` raw label syntax"
msgstr ""

#: ../../source/datatypes/functionality.rst:151
msgid "``latex_simple``: format for LaTeX (including dollar signs), using ``seekpath`` raw label syntax"
msgstr ""

#: ../../source/datatypes/functionality.rst:152
msgid "``latex_seekpath``: format for LaTeX (including dollar signs), using ``simple`` raw label syntax"
msgstr ""

#: ../../source/datatypes/functionality.rst:153
msgid "``gnuplot_simple``: format for GNUPlot (Unicode for Greek letters, LaTeX syntax `without` dollar signs for underscores), using ``seekpath`` raw label syntax"
msgstr ""

#: ../../source/datatypes/functionality.rst:154
msgid "gnuplot_seekpath``: format for GNUPlot (Unicode for Greek letters, LaTeX syntax `without` dollar signs for underscores), using ``simple`` raw label syntax"
msgstr ""

#: ../../source/datatypes/functionality.rst:155
msgid "``pass``: no-op prettifier: leaves all strings unchanged to their raw value"
msgstr ""

