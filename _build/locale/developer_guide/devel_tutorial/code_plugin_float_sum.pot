# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, ECOLE POLYTECHNIQUE FEDERALE DE LAUSANNE (Theory and Simulation of Materials (THEOS) and National Centre for Computational Design and Discovery of Novel Materials (NCCR MARVEL)), Switzerland and ROBERT BOSCH LLC, USA. All rights reserved
# This file is distributed under the same license as the AiiDA package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: AiiDA 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-15 13:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/developer_guide/devel_tutorial/code_plugin_float_sum.rst:4
msgid "Data plugin - Float Summation"
msgstr ""

#: ../../source/developer_guide/devel_tutorial/code_plugin_float_sum.rst:11
msgid "Introducing a new data type"
msgstr ""

#: ../../source/developer_guide/devel_tutorial/code_plugin_float_sum.rst:12
msgid "We will start by describing what is a data plugin, and by creating a new one."
msgstr ""

#: ../../source/developer_guide/devel_tutorial/code_plugin_float_sum.rst:14
msgid "A data plugin is a subclass of :py:class:`Data<aiida.orm.nodes.data.data.Data>`. In the class, you should provide methods that the end user should use to store high-level objects (for instance, for a crystal structure, there can be a method for setting the unit cell, one for adding an atom in a given position, ...). Internally, you should choose where to store the content. There are two options:"
msgstr ""

#: ../../source/developer_guide/devel_tutorial/code_plugin_float_sum.rst:20
msgid "**In the AiiDA database**. This is useful for small amounts of data, that you plan to query. In this case, use ``self._set_attr(attr_name, attr_value)`` to store the required value."
msgstr ""

#: ../../source/developer_guide/devel_tutorial/code_plugin_float_sum.rst:23
msgid "**In the AiiDA file repository (as a file on the disk)**. This is suitable for big files and quantities that you do not want to query. In this case, access the folder using ``self.folder`` and use the methods of ``self.folder`` to create files, subfolders, ..."
msgstr ""

#: ../../source/developer_guide/devel_tutorial/code_plugin_float_sum.rst:28
msgid "Of course, it is also good practice to provide \"getter\" methods to retrieve the data in the database and return it back to the user. The idea is that the user can operate directly only with the methods you provide, and should not need to know how you decided to store the data inside the AiiDA database."
msgstr ""

#: ../../source/developer_guide/devel_tutorial/code_plugin_float_sum.rst:33
msgid "As a simple example that we will use for the exercise below, imagine that we want to introduce a new type of data node that simply stores a float number. We will call it ``FloatData``, and the class implementation can look like this::"
msgstr ""

#: ../../source/developer_guide/devel_tutorial/code_plugin_float_sum.rst:58
msgid "The definition of this new data type should reside below a ``data`` sub package in your plugin package, with directory structure like::"
msgstr ""

#: ../../source/developer_guide/devel_tutorial/code_plugin_float_sum.rst:78
msgid "And following lines should be there in the ``setup.json`` file::"
msgstr ""

#: ../../source/developer_guide/devel_tutorial/code_plugin_float_sum.rst:92
msgid "Please see the documentation about the :ref:`entry points<plugins.entry_points>` to learn more about the plugin system."
msgstr ""

#: ../../source/developer_guide/devel_tutorial/code_plugin_float_sum.rst:96
msgid "Exercise: Modifying the calculation plugin"
msgstr ""

#: ../../source/developer_guide/devel_tutorial/code_plugin_float_sum.rst:97
msgid "Your exercise consists in creating a new calculation plugin (let's call it for instance ``SumFloatCalculation``) that will also perform the sum, but accept as input two ``FloatData`` node and return also a ``FloatData`` node containing the sum."
msgstr ""

#: ../../source/developer_guide/devel_tutorial/code_plugin_float_sum.rst:101
msgid "Below, you will find some hints on the parts you need to modify with respect to the previous tutoria using instead ``Dict`` both as inputs and outputs."
msgstr ""

#: ../../source/developer_guide/devel_tutorial/code_plugin_float_sum.rst:103
msgid "Remember to add an entry point for the ``SumFloatCalculation`` in the ``setup.json`` file and re-install the package and refresh entry points. It is up to you to either put the new class in the same ``sum.py`` or create a new ``floatsum.py``. The same also applies to the new parser class."
msgstr ""

#: ../../source/developer_guide/devel_tutorial/code_plugin_float_sum.rst:108
msgid "Changes to the parser"
msgstr ""

#: ../../source/developer_guide/devel_tutorial/code_plugin_float_sum.rst:110
msgid "The plugin should now return a ``FloatData`` instead of a ``Dict``, therefore the parser code should contain something like the following::"
msgstr ""

#: ../../source/developer_guide/devel_tutorial/code_plugin_float_sum.rst:118
msgid "Changes to the input plugin"
msgstr ""

#: ../../source/developer_guide/devel_tutorial/code_plugin_float_sum.rst:120
msgid "To be able to run your new ``FloatsumParser``, you will need the corresponding input plugin (``FloatsumCalculation``). The first modification is then to link to the correct parser class::"
msgstr ""

#: ../../source/developer_guide/devel_tutorial/code_plugin_float_sum.rst:126
msgid "For consistency, we also want that the input plugin accepts two ``FloatData`` instead of a single ``Dict``. Therefore, you have to update the ``retdict`` object accordingly::"
msgstr ""

#: ../../source/developer_guide/devel_tutorial/code_plugin_float_sum.rst:145
msgid "You need then to change the main code to use the values obtained from the two nodes, rather than from a single node as before. This should be easy, so we leave this task to you. Note that we plan to use the same python code to actually perform the sum, so the JSON file to be generated should have the same format."
msgstr ""

#: ../../source/developer_guide/devel_tutorial/code_plugin_float_sum.rst:151
msgid "We also suggest that you add utility methods (to the benefit of the end user) to provide the addends to the code, something like::"
msgstr ""

#: ../../source/developer_guide/devel_tutorial/code_plugin_float_sum.rst:159
msgid "and similarly for the second addend."
msgstr ""

#: ../../source/developer_guide/devel_tutorial/code_plugin_float_sum.rst:162
msgid "Code"
msgstr ""

#: ../../source/developer_guide/devel_tutorial/code_plugin_float_sum.rst:163
msgid "The python code that actually performs the calculation does not need to be modified. We can reuse the same file, but we suggest to setup a new code in AiiDA, with a different name, using as default plugin the ``sum.floatsum`` plugin."
msgstr ""

#: ../../source/developer_guide/devel_tutorial/code_plugin_float_sum.rst:169
msgid "Submission script"
msgstr ""

#: ../../source/developer_guide/devel_tutorial/code_plugin_float_sum.rst:170
msgid "Finally, adapt your submission script to create the correct input nodes, and try to perform a sum of two numbers to verify that you did all correctly!"
msgstr ""

#: ../../source/developer_guide/devel_tutorial/code_plugin_float_sum.rst:173
msgid "After (re)registering the entry points, do not forget to restart the daemon so that it will recognize the change! The same should be done if you do any change to the plugin, otherwise the daemon may have cached the old file and will keep using it."
msgstr ""

