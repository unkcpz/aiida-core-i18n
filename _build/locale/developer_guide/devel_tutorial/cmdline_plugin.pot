# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, ECOLE POLYTECHNIQUE FEDERALE DE LAUSANNE (Theory and Simulation of Materials (THEOS) and National Centre for Computational Design and Discovery of Novel Materials (NCCR MARVEL)), Switzerland and ROBERT BOSCH LLC, USA. All rights reserved
# This file is distributed under the same license as the AiiDA package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: AiiDA 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-15 13:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/developer_guide/devel_tutorial/cmdline_plugin.rst:6
msgid "Commandline plugin - Data subcommand"
msgstr ""

#: ../../source/developer_guide/devel_tutorial/cmdline_plugin.rst:11
msgid "If your plugin provides :doc:`custom data types <code_plugin_float_sum>`, you might want to provide commandline commands to handle them: Create them from files (example: pseudopotentials), provide export to file formats, visualize them, etc."
msgstr ""

#: ../../source/developer_guide/devel_tutorial/cmdline_plugin.rst:13
msgid "With commandline plugins you have the possibility to make you command accessible from the ``verdi`` commandline. Your cli plugin will be treated as a subcommand of ``verdi data``."
msgstr ""

#: ../../source/developer_guide/devel_tutorial/cmdline_plugin.rst:16
msgid "Exercise: command to export FloatData to file"
msgstr ""

#: ../../source/developer_guide/devel_tutorial/cmdline_plugin.rst:18
msgid "Plugin structure::"
msgstr ""

#: ../../source/developer_guide/devel_tutorial/cmdline_plugin.rst:29
msgid "The file ``float.py`` can be taken from :doc:`the datatype tutorial <code_plugin_float_sum>` or replaced by your own custom data type."
msgstr ""

#: ../../source/developer_guide/devel_tutorial/cmdline_plugin.rst:31
msgid "File excerpt ``setup.json``::"
msgstr ""

#: ../../source/developer_guide/devel_tutorial/cmdline_plugin.rst:44
msgid "We will assume your plugin provides a ``FloatData`` data class. Let's provide a command that exports it to some file format."
msgstr ""

#: ../../source/developer_guide/devel_tutorial/cmdline_plugin.rst:46
msgid "First, we create a new subpackage (this is optional but helps structure our plugin), containing an empty module in which we will work. New plugin structure::"
msgstr ""

#: ../../source/developer_guide/devel_tutorial/cmdline_plugin.rst:60
msgid "Inside that module we will first create an empty command-group (it will do nothing but subcommands can be added to it later). which can be called from the commandline using ``verdi data yourplugin-float``. Command groups are explained in the `Click documentation <click_docs>`_."
msgstr ""

#: ../../source/developer_guide/devel_tutorial/cmdline_plugin.rst:62
msgid "File ``float_cmd.py``::"
msgstr ""

#: ../../source/developer_guide/devel_tutorial/cmdline_plugin.rst:73
msgid "This so far does nothing and will not yet be recognized by AiiDA. We will now expose it through an entry point for AiiDA to find. Changes to file ``setup.json``::"
msgstr ""

#: ../../source/developer_guide/devel_tutorial/cmdline_plugin.rst:90
msgid "Now we only have to reinstall our plugin (``pip install -e <path/to/aiida-yourplugin>``) and the command should be recognized. We can test it by running::"
msgstr ""

#: ../../source/developer_guide/devel_tutorial/cmdline_plugin.rst:94
msgid "It should print some basic usage information containing the docstring we gave to the ``float_cmd()`` function."
msgstr ""

#: ../../source/developer_guide/devel_tutorial/cmdline_plugin.rst:96
msgid "The last step is now implementing ``verdi data yourplugin-float export`` command that exports our FloatData instance to a file."
msgstr ""

#: ../../source/developer_guide/devel_tutorial/cmdline_plugin.rst:98
msgid "Append to file ``float_cmd.py``::"
msgstr ""

#: ../../source/developer_guide/devel_tutorial/cmdline_plugin.rst:115
msgid "A subcommand to a group can be defined using the following pattern::"
msgstr ""

#: ../../source/developer_guide/devel_tutorial/cmdline_plugin.rst:121
msgid "Where the subcommand will now automatically have the name of the function. If you want it to have a different name, simply pass it as an argument to the ``<group>.command('<subcmd name>')`` decorator."
msgstr ""

#: ../../source/developer_guide/devel_tutorial/cmdline_plugin.rst:129
msgid "As is mentioned in the comment, it is important to load the dbenv as late as possible. Particularly it should never be done at import time (on module level) but only inside whichever function requires it. This ensures that command completion does not get slowed down while importing your command."
msgstr ""

#: ../../source/developer_guide/devel_tutorial/cmdline_plugin.rst:131
msgid "Last but by no means least, it is important to test our plugin command, this example will use the builtin unittest framework but it is just as well possible to use pytest."
msgstr ""

#: ../../source/developer_guide/devel_tutorial/cmdline_plugin.rst:133
msgid "New structure::"
msgstr ""

#: ../../source/developer_guide/devel_tutorial/cmdline_plugin.rst:148
msgid "Example test in ``test_float_cmd.py``::"
msgstr ""

#: ../../source/developer_guide/devel_tutorial/cmdline_plugin.rst:176
msgid "This test can now be run using ``TEST_BACKEND=django python -m unittest discover`` from your top level project directory ``aiida-yourplugin``."
msgstr ""

#: ../../source/developer_guide/devel_tutorial/cmdline_plugin.rst:178
msgid "As a further exercise, try adding a ``--format`` option to choose between plain text and, say json."
msgstr ""

#: ../../source/developer_guide/devel_tutorial/cmdline_plugin.rst:181
msgid "Understanding commandline plugins"
msgstr ""

#: ../../source/developer_guide/devel_tutorial/cmdline_plugin.rst:183
msgid "The discovery of plugins via entry points follows exactly the same mechanisms as all other plugin types."
msgstr ""

#: ../../source/developer_guide/devel_tutorial/cmdline_plugin.rst:185
msgid "The possibility of plugging cli commands into each other is a feature of ``click`` a python library that greatly simplifies the task. You can find in-depth documentation here: `Click 6.0 docs <click_docs>`_."
msgstr ""

