# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, ECOLE POLYTECHNIQUE FEDERALE DE LAUSANNE (Theory and Simulation of Materials (THEOS) and National Centre for Computational Design and Discovery of Novel Materials (NCCR MARVEL)), Switzerland and ROBERT BOSCH LLC, USA. All rights reserved
# This file is distributed under the same license as the AiiDA package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Jianxing Huang <jx.huang.x@gmail.com>, 2019
# Jason.Eu <morty.yu@yahoo.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: AiiDA 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-07-16 20:22+0000\n"
"PO-Revision-Date: 2019-05-17 20:01+0000\n"
"Last-Translator: Jason.Eu <morty.yu@yahoo.com>, 2019\n"
"Language-Team: Chinese (China) (https://www.transifex.com/aiidateam/teams/98967/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../docs/source/verdi/verdi_user_guide.rst:4
msgid "Concepts"
msgstr "概念"

#: ../docs/source/verdi/verdi_user_guide.rst:6
msgid ""
"In this section, a few basic concepts of the command line interface will be "
"explained that will apply to all the ``verdi`` commands."
msgstr "在这一部分中，一些交互命令行的基本概念会被介绍，这些概念对所有的 ``verdi`` 命令生效。"

#: ../docs/source/verdi/verdi_user_guide.rst:11
msgid "Help strings"
msgstr "帮助信息"

#: ../docs/source/verdi/verdi_user_guide.rst:12
msgid ""
"Each ``verdi`` command and any optional sub commands have automatically "
"generated help strings that explain the command's functionality and usage. "
"To show the help string for any command, simply append the ``--help`` "
"option. For example ``verdi process kill --help`` will display:"
msgstr ""
"每一个 ``verdi`` 命令和任何子选项都已经自动生成了帮助信息，解释了命令的功能和用法。为了展示每一种命令的帮助信息，只需增加 "
"``--help`` 选项。举个例子，输入 ``verdi process kill --help`` 则会得到::"

#: ../docs/source/verdi/verdi_user_guide.rst:29
msgid "All help strings have the same format and consist of three parts:"
msgstr "全部的帮助信息都有着一致的格式，并包括三个部分:"

#: ../docs/source/verdi/verdi_user_guide.rst:31
msgid "A usage line describing how to invoke and the accepted parameters"
msgstr "一行使用方法，解释了如何调用和可以接受的参数"

#: ../docs/source/verdi/verdi_user_guide.rst:32
msgid "A description of the commands functionality"
msgstr "一段关于命令功能的描述"

#: ../docs/source/verdi/verdi_user_guide.rst:33
msgid "A list of the available options"
msgstr "一个全部可用选项的列表"

#: ../docs/source/verdi/verdi_user_guide.rst:35
msgid ""
"The ``[OPTIONS]`` and ``[PROCESSES]...`` tags in the usage description, "
"denote the 'parameters' that the command takes. A more detailed description "
"of the available options will be listed after the description of the "
"commands functionality The positional arguments will only be described in "
"the command description itself. For a more detailed explanation of the "
"difference between options and arguments, see the section about command line"
" :ref:`parameters<cli_parameters>`."
msgstr ""
"使用方法描述部分的 ``[OPTIONS]`` 和 ``[PROCESSES]...`` "
"标签表示了命令接受的“参数”。对于这些可用选项更详细的解释会在接下来针对命令功能的描述中列出。固定位置的参数只会在命令描述本身介绍。对于选项和参数之间不同点更详细的介绍，请参阅关于命令行的部分"
" :ref:`参数<cli_parameters>` 。"

#: ../docs/source/verdi/verdi_user_guide.rst:44
msgid "Parameters"
msgstr "参数"

#: ../docs/source/verdi/verdi_user_guide.rst:45
msgid ""
"Most of the ``verdi`` commands and their subcommands can take one or "
"multiple parameters. In the language of command line interfaces, these "
"parameters come in two flavors:"
msgstr "大部分的 ``verdi`` 命令和它们的子命令都可以接受一个或更多的参数。在命令行中，这些参数有两种风格:"

#: ../docs/source/verdi/verdi_user_guide.rst:48
msgid "Options"
msgstr "选项（Options）"

#: ../docs/source/verdi/verdi_user_guide.rst:49
msgid "Arguments"
msgstr "参数（Arguments）"

#: ../docs/source/verdi/verdi_user_guide.rst:51
msgid ""
"Arguments are positional parameters, whereas options are indicated by a flag"
" that precedes the value, typically of the form ``-f``, or ``--flag``. The "
"command line :ref:`help string<cli_help_strings>` section explained that "
"each command will have a help string with a usage line, for example::"
msgstr ""
"Arguments是固定位置的参数，而options的位置由一个前置的符号表示，通常形如 ``-f`` 或者 ``--flag`` 。 "
":ref:`帮助信息<cli_help_strings>` 部分解释了每一命令都有一个包含了使用方法的帮助，例如 ::"

#: ../docs/source/verdi/verdi_user_guide.rst:56
msgid ""
"The ``[OPTIONS]`` tag indicates that the command takes one or multiple "
"options and one or multiple ``[PROCESSES]`` as arguments. The square "
"brackets in the usage line, indicate that the parameter is optional and not "
"required. Three dots ``...`` following a parameter indicate that it can not "
"take just one, but also more than one values."
msgstr ""
"``[OPTIONS]`` 标签表示命令需要接受一个或多个选项和一个或多个 ``[PROCESSES]`` "
"作为参数传入。使用方法中的方括号表示这些参数是可选的而不是必需的。参数后的省略号（ ``...`` ）则表示该参数可以有多个而不止一个。"

#: ../docs/source/verdi/verdi_user_guide.rst:64
msgid "Profile"
msgstr "配置"

#: ../docs/source/verdi/verdi_user_guide.rst:65
msgid ""
"AiiDA supports multiple profiles per installation, that can each be "
"configured to use different databases. One of these profiles will always be "
"marked as the default profile. To show the current default profile, execute "
"the command::"
msgstr ""
"AiiDA支持在每次安装时创建多个不同的配置，从而每一个都可以使用不同的数据库。其中一个通常被标记为默认配置。为了显示当前的默认配置，执行以下命令::"

#: ../docs/source/verdi/verdi_user_guide.rst:71
msgid ""
"The default profile will be highlighted. By default, all ``verdi`` commands "
"will always use the default profile. Having to change the default profile, "
"anytime one wants to apply the ``verdi`` command to another profile is "
"cumbersome. Therefore, each ``verdi`` command supports the ``-p/--profile`` "
"option, that will force ``verdi`` to use the given profile. For example, if "
"you wanted to display the list of processes for a profile that is not the "
"current default, you can execute::"
msgstr ""
"默认配置会被高亮显示。默认情况下，所有的 ``verdi`` 命令都使用默认配置。用户若要对另一个配置执行 ``verdi`` "
"命令都必须改变默认配置的操作则会显得冗余。因此，每一个 ``verdi`` 都支持 ``-p/--profile`` 选项，从而可以强制 "
"``verdi`` 来使用给定的配置。举个例子，若你希望显示一个非默认的配置的例程列表，可以执行 ::"

#: ../docs/source/verdi/verdi_user_guide.rst:79
msgid ""
"Note that the specified profile will be used for this and only this command."
" All subsequent commands, when no specific profile is given, will return to "
"using the default profile."
msgstr "注意选定的配置将会且仅会被用于此命令。对于随后的全部给定命令，都将回到默认配置中。"

#: ../docs/source/verdi/verdi_user_guide.rst:86
msgid "Identifiers"
msgstr "身份信息（Identifiers）"

#: ../docs/source/verdi/verdi_user_guide.rst:87
msgid ""
"Many commands will support arguments or options that serve to identify "
"specific entities in the database, such as nodes, users, groups etc. Any "
"entity in AiiDA typically will have three different types of identifier:"
msgstr "许多命令支持用于指定数据库实体的参数或选项，例如节点、用户、组等等。AiiDA的任何实体都有三种不同类型的身份识别信息:"

#: ../docs/source/verdi/verdi_user_guide.rst:90
msgid "``ID``: the integer primary key in the database"
msgstr "``ID``: 数据库中的整数主键标"

#: ../docs/source/verdi/verdi_user_guide.rst:91
msgid ""
"``UUID``: the universally unique identifier, a dash-separated hexadecimal "
"string"
msgstr "``UUID``: 通用唯一确定的身份识别信息，一个由短线分隔得十六进制字符串"

#: ../docs/source/verdi/verdi_user_guide.rst:92
msgid "``LABEL``: a custom string-based label"
msgstr "``LABEL``: 自定义的标签字符串"

#: ../docs/source/verdi/verdi_user_guide.rst:94
msgid ""
"The ``ID`` and ``UUID`` identifiers follow the exact same rules for all the "
"entities in AiiDA's data model. However, the ``LABEL`` will vary from entity"
" to entity. For a ``Code`` instance it will be the ``label`` attribute, "
"whereas for a ``Group`` instance, it will be its name."
msgstr ""
" ``ID`` 和 ``UUID`` 在AiiDA数据模型中的使用都遵循着一致的规则。然而， ``LABEL`` 则会因入口的不同而不同。对于 "
"``Code`` 实例为其 ``label`` 属性，而对 ``Group`` 实例则是其命名。"

#: ../docs/source/verdi/verdi_user_guide.rst:98
msgid ""
"All ``verdi`` command arguments and options that serve to pass an entity "
"identifier, will automatically deduce the intended identifier type. However,"
" since the type of the value is lost over the command line (as each value "
"will be passed as a string type), the command line will have to guess the "
"type. Each value will first be interpreted as an ``ID``. If the value cannot"
" be mapped to the ``ID`` of an entity, it will instead be considered a "
"partial or full ``UUID``. In the case where the identifier can be resolved "
"to neither a valid ``ID`` nor a ``UUID``, the code will finally assume that "
"the value should be interpreted as a ``LABEL``. In almost all cases, this "
"approach will be able to successfully and unambiguously determine the "
"identifier type, however, there are exceptions."
msgstr ""
"所有用于传递入口身份识别信息的 ``verdi`` "
"参数和选项都可以自动推测目标身份识别信息的种类。但是，由于值的类型信息在命令行中的缺失（因为每个值都会以字符串类型传入），命令行只能猜测其类型。每个值都会首先被推测为一个"
" ``ID`` ，若不能正确映射到入口的 ``ID`` ，则接下来会认为是完整 ``UUID`` "
"的一个组成部分。两者都未能正确对应时，则会最终假设该值为一个 ``LABEL`` "
"。在几乎所有情形下，这一路径都可以取得成功因而可以含糊判断身份识别信息的类型。但是，也存在例外。"

#: ../docs/source/verdi/verdi_user_guide.rst:105
msgid "Consider for example a database with the following three groups:"
msgstr "考虑一个有以下三种组的数据库:"

#: ../docs/source/verdi/verdi_user_guide.rst:108
msgid "ID"
msgstr "ID"

#: ../docs/source/verdi/verdi_user_guide.rst:108
msgid "UUID"
msgstr "UUID"

#: ../docs/source/verdi/verdi_user_guide.rst:108
msgid "LABEL"
msgstr "LABEL"

#: ../docs/source/verdi/verdi_user_guide.rst:110
#: ../docs/source/verdi/verdi_user_guide.rst:111
msgid "10"
msgstr "10"

#: ../docs/source/verdi/verdi_user_guide.rst:110
msgid "12dfb104-7b2b-4bca-adc0-1e4fd4ffcc88"
msgstr "12dfb104-7b2b-4bca-adc0-1e4fd4ffcc88"

#: ../docs/source/verdi/verdi_user_guide.rst:110
msgid "group"
msgstr "group"

#: ../docs/source/verdi/verdi_user_guide.rst:111
msgid "11"
msgstr "11"

#: ../docs/source/verdi/verdi_user_guide.rst:111
msgid "deadbeef-62ba-444f-976d-31d925dac557"
msgstr "deadbeef-62ba-444f-976d-31d925dac557"

#: ../docs/source/verdi/verdi_user_guide.rst:112
msgid "12"
msgstr "12"

#: ../docs/source/verdi/verdi_user_guide.rst:112
msgid "3df34a1e-5215-4e1a-b626-7f75b9586ef5"
msgstr "3df34a1e-5215-4e1a-b626-7f75b9586ef5"

#: ../docs/source/verdi/verdi_user_guide.rst:112
msgid "deadbeef"
msgstr "deadbeef"

#: ../docs/source/verdi/verdi_user_guide.rst:115
msgid ""
"We would run into trouble if we wanted to identify the second group by its "
"label ``10``, since it would first be interpreted as an ``ID``, which would "
"return the first group instead. Likewise, if we wanted to retrieve the third"
" group by its label, we would get the second group instead, since the label "
"``deadbeef`` is also a valid partial UUID of the second group. Finally, say "
"we wanted to select the first group using its partial ``UUID`` ``12``, it "
"would unfortunately match the third group on its ``ID`` instead."
msgstr ""
"这种情况下，根据标签 ``10`` 来访问第二组的会遇到问题，因为它会被首先识别为一个 ``ID`` "
"，则会返回第一组。类似地，如果我们希望根据第三组的标签访问之，也会得到第二组，因为 ``deadbeef`` "
"是第二组UUID有效的一部分。最后，如果我们希望根据 ``UUID`` 的一部分 ``12`` 来访问第一组，则会依据 ``ID`` "
"信息得到第三组的数据。"

#: ../docs/source/verdi/verdi_user_guide.rst:119
msgid ""
"Luckily, ``verdi`` provides the tools to break all of these ambiguities with"
" guaranteed success. The latter ambiguity, between an ``ID`` and ``UUID`` "
"can always be resolved by passing a larger partial ``UUID``. Inevitably, "
"eventually a non-numeric character or a dash will be included in the partial"
" ``UUID``, rendering it an invalid ``ID`` and the identifier will be cast to"
" the right type. The case of an identifier, that is intended to refer to a "
"``LABEL``, that just happens to also be a valid ``ID`` or ``UUID`` cannot be"
" solved in this way. For this case ``verdi`` reserves a special character, "
"the exclamation mark ``!`` that can be appended to the identifier. Before "
"any type guessing is done, the command line will check for the presence of "
"this marker, and if found will directly interpret the identifier as a "
"``LABEL``. For example, to solve ambiguity problems of the first two "
"examples given in this section, one would have had to pass ``10!`` and "
"``deadbeef!``. The exclamation point would have forced them to be "
"interpreted as a ``LABEL`` and ensured that the right group would be "
"retrieved."
msgstr ""
"幸运的是， ``verdi`` 提供了可以消除歧义的工具从而可以确保成功。对于后一种歧义，即 ``ID`` 和 ``UUID`` "
"之间的歧义，可通过传入一个更长的 ``UUID`` 成分来解决。不可避免地，非数字的字母或者短线可以被包含其中，使之成为一个无效的 ``ID`` "
"从而可以被正确识别。而对希望被识别为 ``LABEL`` 的身份认证信息，若其恰好是有效的 ``ID`` 或 ``UUID`` "
"，则不能使用这一方法来解决。对这种情况， ``verdi`` 保留了一个特殊字符即感叹号 ``!`` "
"，可将其放置在身份识别信息的后面。在任何类型猜测完成前，命令行会识别标记符的存在与否，若找到则将身份识别信息识别为 ``LABEL`` "
"。举个例子，为了解决本部分前两个例子的歧义，可以传入 ``10!`` 和 ``deadbeef!`` 。此感叹号会强制命令行识别其为 ``LABEL``"
" 从而保证可以处理正确的组。"

#: ../docs/source/verdi/verdi_user_guide.rst:128
msgid "In summary, to guarantee correct identification of a specific type:"
msgstr "总结一下，为了保证正确识别的身份识别信息的类型:"

#: ../docs/source/verdi/verdi_user_guide.rst:130
msgid ""
"``UUID``: include at least one non-numeric character or dash in the partial "
"identifier"
msgstr "``UUID``: 在节选部分中包含至少一个非数字的字母或者短线"

#: ../docs/source/verdi/verdi_user_guide.rst:131
msgid ""
"``LABEL``: append an exclamation mark ``!`` at the end of the identifier"
msgstr "``LABEL``: 在识别符结尾附加一个感叹号 ``!`` "

#: ../docs/source/verdi/verdi_user_guide.rst:137
msgid "Multi value options"
msgstr "多值选项"

#: ../docs/source/verdi/verdi_user_guide.rst:138
msgid ""
"The section on command line :ref:`parameters<cli_parameters>` explained that"
" some commands support options and arguments that take one or multiple "
"values. This is fairly typical for command line arguments, but slightly more"
" unorthodox for options, that typically only ever take one value, or none at"
" all if it is a flag. However, ``verdi`` has multiple commands where an "
"option needs to be able to support options that take more than one value. "
"Take for example the ``verdi export create`` command, with part of its help "
"string::"
msgstr ""
":ref:`参数<cli_parameters>` "
"这一部分已经解释了一些命令支持一个或多个选项或参数。这对于命令行参数来说是很典型的情况，但对于选项来说稍有一点不遵循传统，因为后者通常只有一个值或者作为一个flag它将不会携带任何值。但是，"
" ``verdi`` 存在多种命令其中选项可以支持多于一个值。以 ``verdi export create`` "
"命令为例，其帮助信息的一部分如下所示::"

#: ../docs/source/verdi/verdi_user_guide.rst:158
msgid ""
"The file to which the export archive should be written is given by the "
"argument ``OUTPUT_FILE`` and the command supports various identifier "
"options, e.g. ``CODE...`` and ``NODE...``, that allow the user to specify "
"which entities should be exported. Note the terminal dots ``...`` that "
"indicate that the options take one or more values. In traditional command "
"line interfaces, one would have to repeat the option flag if multiple values"
" needed to be specified, e.g.::"
msgstr ""
"导出档案的目标文件将被写入到参数 ``OUTPUT_FILE`` 所指定的位置，而命令行支持多种识别选项，例如 ``CODE...`` 和 "
"``NODE...`` ，支持用户指定导出哪一个入口的信息。注意省略号 ``...`` "
"表示选项可以携带一个或多个值。传统的命令行中，用户若要传入多个值则必须重复选项flag，例如 ::"

#: ../docs/source/verdi/verdi_user_guide.rst:164
msgid ""
"However, for large numbers of values, this gets cumbersome, which is why "
"``verdi`` supports so-called multiple value options, that allow this to be "
"rewritten as::"
msgstr "然而，对于大量的值，这会显得十分冗长，这就是为什么 ``verdi`` 支持所谓的多值选项，因而允许按照如下方式书写 ::"

#: ../docs/source/verdi/verdi_user_guide.rst:168
msgid ""
"Unfortunately, this leads to an ambiguity, as the 'greedy' multi value "
"option ``-N`` will interpret the argument ``archive.aiida`` as an option "
"value. This will cause the command to abort if the validation fails, but "
"even worse it might be silently accepted. The root of the problem is that "
"the multi value option needs to necessarily be greedy and cannot distinguish"
" which value belongs to it and which value is just another argument. The "
"typical solution for this problem is to use the so called 'endopts' marker, "
"which is defined as two dashes ``--``, which can be used to mark the end of "
"the options and clearly distinguish them from the arguments. Note that this "
"is also indicated by the usage string of the command where it shows ``[--]``"
" between the ``[OPTIONS]`` and ``OUTPUT_FILE`` parameters, meaning that the "
"``--`` endopts marker can optionally be used. The previous command can "
"therefore be made unambiguous as follows::"
msgstr ""
"不幸的是，这将导致歧义，因为“贪婪”的多值选项 ``-N`` 会把参数 "
"``archive.aiida``看作一个选项值。一旦识别不成功，这会导致命令运行失败，更糟的情况下错误会被静默地读入。问题的根源在于多值选项需要贪婪识别因而不能区分哪些值是属于选项的，而哪些值是一个参数。通常的解决方案是使用所谓的'endopts'标记，其被定义为两根短线"
" ``--`` ，可用于标记选项的末尾并清晰地分辨它们和参数。注意使用帮助信息中，其被表示为 ``[OPTIONS]`` 和 "
"``OUTPUT_FILE`` 参数之间的 ``[--]`` ，意味着 ``--`` "
"endopts标记可以被使用。前述命令因而可以写作以下方式而不会引发歧义 ::"

#: ../docs/source/verdi/verdi_user_guide.rst:177
msgid ""
"This time the parser will notice the ``--`` end options marker and correctly"
" identify ``archive.aiida`` as the positional argument."
msgstr "这次解释器会注意到 ``--`` 这个选项终止标识符，并正确识别 ``archive.aiida`` 为一个固定位置的参数。"

#: ../docs/source/verdi/verdi_user_guide.rst:183
msgid "Commands"
msgstr "命令"

#: ../docs/source/verdi/verdi_user_guide.rst:184
msgid "Below is a list with all available subcommands."
msgstr "以下是一个包含全部子命令的完整列表。"

#: ../docs/source/verdi/verdi_user_guide.rst:189
msgid "``verdi calcjob``"
msgstr "``verdi calcjob``"

#: ../docs/source/verdi/verdi_user_guide.rst:213
msgid "``verdi code``"
msgstr "``verdi code``"

#: ../docs/source/verdi/verdi_user_guide.rst:238
msgid "``verdi comment``"
msgstr "``verdi comment``"

#: ../docs/source/verdi/verdi_user_guide.rst:259
msgid "``verdi completioncommand``"
msgstr "``verdi completioncommand``"

#: ../docs/source/verdi/verdi_user_guide.rst:279
msgid "``verdi computer``"
msgstr "``verdi computer``"

#: ../docs/source/verdi/verdi_user_guide.rst:306
msgid "``verdi config``"
msgstr "``verdi config``"

#: ../docs/source/verdi/verdi_user_guide.rst:323
msgid "``verdi daemon``"
msgstr "``verdi daemon``"

#: ../docs/source/verdi/verdi_user_guide.rst:347
msgid "``verdi data``"
msgstr "``verdi data``"

#: ../docs/source/verdi/verdi_user_guide.rst:372
msgid "``verdi database``"
msgstr "``verdi database``"

#: ../docs/source/verdi/verdi_user_guide.rst:391
msgid "``verdi devel``"
msgstr "``verdi devel``"

#: ../docs/source/verdi/verdi_user_guide.rst:411
msgid "``verdi export``"
msgstr "``verdi export``"

#: ../docs/source/verdi/verdi_user_guide.rst:432
msgid "``verdi graph``"
msgstr "``verdi graph``"

#: ../docs/source/verdi/verdi_user_guide.rst:450
msgid "``verdi group``"
msgstr "``verdi group``"

#: ../docs/source/verdi/verdi_user_guide.rst:477
msgid "``verdi import``"
msgstr "``verdi import``"

#: ../docs/source/verdi/verdi_user_guide.rst:529
msgid "``verdi node``"
msgstr "``verdi node``"

#: ../docs/source/verdi/verdi_user_guide.rst:552
msgid "``verdi plugin``"
msgstr "``verdi plugin``"

#: ../docs/source/verdi/verdi_user_guide.rst:570
msgid "``verdi process``"
msgstr "``verdi process``"

#: ../docs/source/verdi/verdi_user_guide.rst:596
msgid "``verdi profile``"
msgstr "``verdi profile``"

#: ../docs/source/verdi/verdi_user_guide.rst:617
msgid "``verdi quicksetup``"
msgstr "``verdi quicksetup``"

#: ../docs/source/verdi/verdi_user_guide.rst:660
msgid "``verdi rehash``"
msgstr "``verdi rehash``"

#: ../docs/source/verdi/verdi_user_guide.rst:680
msgid "``verdi restapi``"
msgstr "``verdi restapi``"

#: ../docs/source/verdi/verdi_user_guide.rst:707
msgid "``verdi run``"
msgstr "``verdi run``"

#: ../docs/source/verdi/verdi_user_guide.rst:730
msgid "``verdi setup``"
msgstr "``verdi setup``"

#: ../docs/source/verdi/verdi_user_guide.rst:769
msgid "``verdi shell``"
msgstr "``verdi shell``"

#: ../docs/source/verdi/verdi_user_guide.rst:791
msgid "``verdi status``"
msgstr "``verdi status``"

#: ../docs/source/verdi/verdi_user_guide.rst:806
msgid "``verdi user``"
msgstr "``verdi user``"
