# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, ECOLE POLYTECHNIQUE FEDERALE DE LAUSANNE (Theory and Simulation of Materials (THEOS) and National Centre for Computational Design and Discovery of Novel Materials (NCCR MARVEL)), Switzerland and ROBERT BOSCH LLC, USA. All rights reserved
# This file is distributed under the same license as the AiiDA package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: AiiDA 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-20 06:04+0000\n"
"PO-Revision-Date: 2019-05-20 06:05+0000\n"
"Language-Team: Chinese (China) (https://www.transifex.com/scut-ccmp/teams/98995/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../docs/source/verdi/verdi_user_guide.rst:4
msgid "Concepts"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:6
msgid ""
"In this section, a few basic concepts of the command line interface will be "
"explained that will apply to all the ``verdi`` commands."
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:11
msgid "Help strings"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:12
msgid ""
"Each ``verdi`` command and any optional sub commands have automatically "
"generated help strings that explain the command's functionality and usage. "
"To show the help string for any command, simply append the ``--help`` "
"option. For example ``verdi process kill --help`` will display:"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:29
msgid "All help strings have the same format and consist of three parts:"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:31
msgid "A usage line describing how to invoke and the accepted parameters"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:32
msgid "A description of the commands functionality"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:33
msgid "A list of the available options"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:35
msgid ""
"The ``[OPTIONS]`` and ``[PROCESSES]...`` tags in the usage description, "
"denote the 'parameters' that the command takes. A more detailed description "
"of the available options will be listed after the description of the "
"commands functionality The positional arguments will only be described in "
"the command description itself. For a more detailed explanation of the "
"difference between options and arguments, see the section about command line"
" :ref:`parameters<cli_parameters>`."
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:44
msgid "Parameters"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:45
msgid ""
"Most of the ``verdi`` commands and their subcommands can take one or "
"multiple parameters. In the language of command line interfaces, these "
"parameters come in two flavors:"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:48
msgid "Options"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:49
msgid "Arguments"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:51
msgid ""
"Arguments are positional parameters, whereas options are indicated by a flag"
" that precedes the value, typically of the form ``-f``, or ``--flag``. The "
"command line :ref:`help string<cli_help_strings>` section explained that "
"each command will have a help string with a usage line, for example::"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:56
msgid ""
"The ``[OPTIONS]`` tag indicates that the command takes one or multiple "
"options and one or multiple ``[PROCESSES]`` as arguments. The square "
"brackets in the usage line, indicate that the parameter is optional and not "
"required. Three dots ``...`` following a parameter indicate that it can not "
"take just one, but also more than one values."
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:64
msgid "Profile"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:65
msgid ""
"AiiDA supports multiple profiles per installation, that can each be "
"configured to use different databases. One of these profiles will always be "
"marked as the default profile. To show the current default profile, execute "
"the command::"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:71
msgid ""
"The default profile will be highlighted. By default, all ``verdi`` commands "
"will always use the default profile. Having to change the default profile, "
"anytime one wants to apply the ``verdi`` command to another profile is "
"cumbersome. Therefore, each ``verdi`` command supports the ``-p/--profile`` "
"option, that will force ``verdi`` to use the given profile. For example, if "
"you wanted to display the list of processes for a profile that is not the "
"current default, you can execute::"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:79
msgid ""
"Note that the specified profile will be used for this and only this command."
" All subsequent commands, when no specific profile is given, will return to "
"using the default profile."
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:86
msgid "Identifiers"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:87
msgid ""
"Many commands will support arguments or options that serve to identify "
"specific entities in the database, such as nodes, users, groups etc. Any "
"entity in AiiDA typically will have three different types of identifier:"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:90
msgid "``ID``: the integer primary key in the database"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:91
msgid ""
"``UUID``: the universally unique identifier, a dash-separated hexadecimal "
"string"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:92
msgid "``LABEL``: a custom string-based label"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:94
msgid ""
"The ``ID`` and ``UUID`` identifiers follow the exact same rules for all the "
"entities in AiiDA's data model. However, the ``LABEL`` will vary from entity"
" to entity. For a ``Code`` instance it will be the ``label`` attribute, "
"whereas for a ``Group`` instance, it will be its name."
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:98
msgid ""
"All ``verdi`` command arguments and options that serve to pass an entity "
"identifier, will automatically deduce the intended identifier type. However,"
" since the type of the value is lost over the command line (as each value "
"will be passed as a string type), the command line will have to guess the "
"type. Each value will first be interpreted as an ``ID``. If the value cannot"
" be mapped to the ``ID`` of an entity, it will instead be considered a "
"partial or full ``UUID``. In the case where the identifier can be resolved "
"to neither a valid ``ID`` nor a ``UUID``, the code will finally assume that "
"the value should be interpreted as a ``LABEL``. In almost all cases, this "
"approach will be able to successfully and unambiguously determine the "
"identifier type, however, there are exceptions."
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:105
msgid "Consider for example a database with the following three groups:"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:108
msgid "ID"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:108
msgid "UUID"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:108
msgid "LABEL"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:110
#: ../docs/source/verdi/verdi_user_guide.rst:111
msgid "10"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:110
msgid "12dfb104-7b2b-4bca-adc0-1e4fd4ffcc88"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:110
msgid "group"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:111
msgid "11"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:111
msgid "deadbeef-62ba-444f-976d-31d925dac557"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:112
msgid "12"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:112
msgid "3df34a1e-5215-4e1a-b626-7f75b9586ef5"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:112
msgid "deadbeef"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:115
msgid ""
"We would run into trouble if we wanted to identify the second group by its "
"label ``10``, since it would first be interpreted as an ``ID``, which would "
"return the first group instead. Likewise, if we wanted to retrieve the third"
" group by its label, we would get the second group instead, since the label "
"``deadbeef`` is also a valid partial UUID of the second group. Finally, say "
"we wanted to select the first group using its partial ``UUID`` ``12``, it "
"would unfortunately match the third group on its ``ID`` instead."
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:119
msgid ""
"Luckily, ``verdi`` provides the tools to break all of these ambiguities with"
" guaranteed success. The latter ambiguity, between an ``ID`` and ``UUID`` "
"can always be resolved by passing a larger partial ``UUID``. Inevitably, "
"eventually a non-numeric character or a dash will be included in the partial"
" ``UUID``, rendering it an invalid ``ID`` and the identifier will be cast to"
" the right type. The case of an identifier, that is intended to refer to a "
"``LABEL``, that just happens to also be a valid ``ID`` or ``UUID`` cannot be"
" solved in this way. For this case ``verdi`` reserves a special character, "
"the exclamation mark ``!`` that can be appended to the identifier. Before "
"any type guessing is done, the command line will check for the presence of "
"this marker, and if found will directly interpret the identifier as a "
"``LABEL``. For example, to solve ambiguity problems of the first two "
"examples given in this section, one would have had to pass ``10!`` and "
"``deadbeef!``. The exclamation point would have forced them to be "
"interpreted as a ``LABEL`` and ensured that the right group would be "
"retrieved."
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:128
msgid "In summary, to guarantee correct identification of a specific type:"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:130
msgid ""
"``UUID``: include at least one non-numeric character or dash in the partial "
"identifier"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:131
msgid ""
"``LABEL``: append an exclamation mark ``!`` at the end of the identifier"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:137
msgid "Multi value options"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:138
msgid ""
"The section on command line :ref:`parameters<cli_parameters>` explained that"
" some commands support options and arguments that take one or multiple "
"values. This is fairly typical for command line arguments, but slightly more"
" unorthodox for options, that typically only ever take one value, or none at"
" all if it is a flag. However, ``verdi`` has multiple commands where an "
"option needs to be able to support options that take more than one value. "
"Take for example the ``verdi export create`` command, with part of its help "
"string::"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:158
msgid ""
"The file to which the export archive should be written is given by the "
"argument ``OUTPUT_FILE`` and the command supports various identifier "
"options, e.g. ``CODE...`` and ``NODE...``, that allow the user to specify "
"which entities should be exported. Note the terminal dots ``...`` that "
"indicate that the options take one or more values. In traditional command "
"line interfaces, one would have to repeat the option flag if multiple values"
" needed to be specified, e.g.::"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:164
msgid ""
"However, for large numbers of values, this gets cumbersome, which is why "
"``verdi`` supports so-called multiple value options, that allow this to be "
"rewritten as::"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:168
msgid ""
"Unfortunately, this leads to an ambiguity, as the 'greedy' multi value "
"option ``-N`` will interpret the argument ``archive.aiida`` as an option "
"value. This will cause the command to abort if the validation fails, but "
"even worse it might be silently accepted. The root of the problem is that "
"the multi value option needs to necessarily be greedy and cannot distinguish"
" which value belongs to it and which value is just another argument. The "
"typical solution for this problem is to use the so called 'endopts' marker, "
"which is defined as two dashes ``--``, which can be used to mark the end of "
"the options and clearly distinguish them from the arguments. Note that this "
"is also indicated by the usage string of the command where it shows ``[--]``"
" between the ``[OPTIONS]`` and ``OUTPUT_FILE`` parameters, meaning that the "
"``--`` endopts marker can optionally be used. The previous command can "
"therefore be made unambiguous as follows::"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:177
msgid ""
"This time the parser will notice the ``--`` end options marker and correctly"
" identify ``archive.aiida`` as the positional argument."
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:183
msgid "Commands"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:184
msgid "Below is a list with all available subcommands."
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:189
msgid "``verdi calcjob``"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:213
msgid "``verdi code``"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:240
msgid "``verdi comment``"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:261
msgid "``verdi completioncommand``"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:281
msgid "``verdi computer``"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:308
msgid "``verdi config``"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:325
msgid "``verdi daemon``"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:349
msgid "``verdi data``"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:375
msgid "``verdi database``"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:394
msgid "``verdi devel``"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:414
msgid "``verdi export``"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:435
msgid "``verdi graph``"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:454
msgid "``verdi group``"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:481
msgid "``verdi import``"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:533
msgid "``verdi node``"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:556
msgid "``verdi plugin``"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:574
msgid "``verdi process``"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:599
msgid "``verdi profile``"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:620
msgid "``verdi quicksetup``"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:664
msgid "``verdi rehash``"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:684
msgid "``verdi restapi``"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:711
msgid "``verdi run``"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:734
msgid "``verdi setup``"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:774
msgid "``verdi shell``"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:796
msgid "``verdi status``"
msgstr ""

#: ../docs/source/verdi/verdi_user_guide.rst:811
msgid "``verdi user``"
msgstr ""
